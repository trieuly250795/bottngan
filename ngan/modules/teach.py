import requests
import urllib.parse
from zlapi.models import Message, MessageStyle, MultiMsgStyle
from config import ADMIN, PREFIX

des = {
    't√°c gi·∫£': "Rosy",
    'm√¥ t·∫£': "D·∫°y Simi tr·∫£ l·ªùi",
    't√≠nh nƒÉng': [
        "üì® D·∫°y Simi tr·∫£ l·ªùi c√°c c√¢u h·ªèi.",
        "üîç T√°ch c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi b·∫±ng d·∫•u '/'",
        "üîó M√£ h√≥a URL cho c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi.",
        "üîç Ki·ªÉm tra quy·ªÅn admin tr∆∞·ªõc khi th·ª±c hi·ªán l·ªánh.",
        "üñºÔ∏è G·ª≠i y√™u c·∫ßu ƒë·∫øn API d·∫°y Simi v√† x·ª≠ l√Ω ph·∫£n h·ªìi.",
        "üîî Th√¥ng b√°o l·ªói c·ª• th·ªÉ n·∫øu c√≥ v·∫•n ƒë·ªÅ x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu."
    ],
    'h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng': [
        "üì© G·ª≠i l·ªánh teach: <c√¢u h·ªèi> / <c√¢u tr·∫£ l·ªùi> ƒë·ªÉ d·∫°y Simi tr·∫£ l·ªùi.",
        "üìå V√≠ d·ª•: teach: B·∫°n kh·ªèe kh√¥ng? / M√¨nh kh·ªèe, c·∫£m ∆°n! ƒë·ªÉ d·∫°y Simi tr·∫£ l·ªùi c√¢u h·ªèi 'B·∫°n kh·ªèe kh√¥ng?' v·ªõi c√¢u tr·∫£ l·ªùi 'M√¨nh kh·ªèe, c·∫£m ∆°n!'.",
        "‚úÖ Nh·∫≠n th√¥ng b√°o tr·∫°ng th√°i v√† k·∫øt qu·∫£ d·∫°y Simi ngay l·∫≠p t·ª©c."
    ]
}

def send_reply_with_style(client, text, message_object, thread_id, thread_type, ttl=None, color="#db342e"):
    """ G·ª≠i tin nh·∫Øn ph·∫£n h·ªìi v·ªõi ƒë·ªãnh d·∫°ng m√†u s·∫Øc v√† in ƒë·∫≠m. """
    base_length = len(text)
    adjusted_length = base_length + 355
    style = MultiMsgStyle([
        MessageStyle(offset=0, length=adjusted_length, style="color", color=color, auto_format=False),
        MessageStyle(offset=0, length=adjusted_length, style="bold", size="8", auto_format=False)
    ])
    msg = Message(text=text, style=style)
    
    if ttl is not None:
        client.replyMessage(msg, message_object, thread_id, thread_type, ttl=ttl)
    else:
        client.replyMessage(msg, message_object, thread_id, thread_type)

def handle_teach_command(message, message_object, thread_id, thread_type, author_id, client):
    """ X·ª≠ l√Ω l·ªánh d·∫°y Simi tr·∫£ l·ªùi. ƒê·ªãnh d·∫°ng l·ªánh c√≥ th·ªÉ l√†: teach: c√¢u h·ªèi / c√¢u tr·∫£ l·ªùi ho·∫∑c teach c√¢u h·ªèi / c√¢u tr·∫£ l·ªùi """
    
    # G·ª≠i ph·∫£n ·ª©ng ngay khi nh·∫≠n l·ªánh
    action = "OK"
    client.sendReaction(message_object, action, thread_id, thread_type, reactionType=75)
    
    # Ki·ªÉm tra t·ª´ kh√≥a l·ªánh b·∫Øt ƒë·∫ßu b·∫±ng "teach" (c√≥ th·ªÉ c√≥ ho·∫∑c kh√¥ng c√≥ d·∫•u ':')
    command_prefix = "teach"
    if not message.lower().startswith(command_prefix):
        error_msg = Message(text="L·ªánh kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng: teach: c√¢u h·ªèi / c√¢u tr·∫£ l·ªùi ho·∫∑c teach c√¢u h·ªèi / c√¢u tr·∫£ l·ªùi")
        client.sendMessage(error_msg, thread_id, thread_type)
        return
    
    # Lo·∫°i b·ªè ti·ªÅn t·ªë "teach" v√† d·∫•u ':' n·∫øu c√≥
    content = message[len(command_prefix):].strip()
    if content.startswith(":"):
        content = content[1:].strip()
    
    if not content:
        error_msg = Message(text="Kh√¥ng t√¨m th·∫•y n·ªôi dung. Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng: teach c√¢u h·ªèi / c√¢u tr·∫£ l·ªùi")
        client.sendMessage(error_msg, thread_id, thread_type)
        return
    
    # T√°ch c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi b·∫±ng d·∫•u '/'
    if "/" not in content:
        error_msg = Message(text="Vui l√≤ng t√°ch c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi b·∫±ng d·∫•u /")
        client.sendMessage(error_msg, thread_id, thread_type)
        return

    ask, ans = content.split("/", 1)
    ask = ask.strip()
    ans = ans.strip()

    if not ask or not ans:
        error_msg = Message(text="C√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
        client.sendMessage(error_msg, thread_id, thread_type)
        return
    
    # M√£ h√≥a URL cho c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi
    encoded_ask = urllib.parse.quote(ask, safe='')
    encoded_ans = urllib.parse.quote(ans, safe='')

    # T·∫°o URL API d·∫°y Simi
    teach_url = f'https://api.sumiproject.net/sim?type=teach&ask={encoded_ask}&ans={encoded_ans}'
    print(f"Sending teaching request to API with: {teach_url}")

    try:
        response = requests.get(teach_url)
        response.raise_for_status()
        print("Response from API:", response.text)
        data = response.json()

        # N·∫øu API tr·∫£ v·ªÅ l·ªói th√¨ l·∫•y th√¥ng b√°o l·ªói, n·∫øu kh√¥ng l·∫•y th√¥ng b√°o th√†nh c√¥ng
        if "error" in data:
            api_message = data["error"]
        else:
            api_message = data.get('message', 'ƒê√£ d·∫°y th√†nh c√¥ng cho Mya.')
        
        reply_text = (
            f"‚úÖ ƒê√£ d·∫°y Mya v·ªõi:\n"
            f"- C√¢u h·ªèi: {ask}\n"
            f"- C√¢u tr·∫£ l·ªùi: {ans}\n"
            f"Ph·∫£n h·ªìi t·ª´ API: {api_message}"
        )
        send_reply_with_style(client, reply_text, message_object, thread_id, thread_type, ttl=120000)
    
    except requests.exceptions.RequestException as e:
        print(f"Error when calling teaching API: {str(e)}")
        error_msg = Message(text=f"ƒê√£ x·∫£y ra l·ªói khi g·ªçi API: {str(e)}")
        client.sendMessage(error_msg, thread_id, thread_type)
    
    except KeyError as e:
        print(f"Error with API data structure: {str(e)}")
        error_msg = Message(text=f"D·ªØ li·ªáu t·ª´ API kh√¥ng ƒë√∫ng c·∫•u tr√∫c: {str(e)}")
        client.sendMessage(error_msg, thread_id, thread_type)
    
    except Exception as e:
        print(f"Unknown error: {str(e)}")
        error_msg = Message(text=f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")
        client.sendMessage(error_msg, thread_id, thread_type)

def get_mitaizl():
    """ Tr·∫£ v·ªÅ m·ªôt dictionary √°nh x·∫° l·ªánh 'teach' t·ªõi h√†m x·ª≠ l√Ω t∆∞∆°ng ·ª©ng. """
    return {
        'teach': handle_teach_command
    }
