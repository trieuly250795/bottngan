import random
import json
import os
from datetime import datetime, timedelta
from zlapi import Message, ThreadType

# ƒê∆∞·ªùng d·∫´n t·ªõi t·ªáp l∆∞u tr·ªØ th√¥ng tin s·ª≠ d·ª•ng
GAY_TEST_FILE = 'gay_test_usage.json'

# H√†m t·∫£i th√¥ng tin s·ª≠ d·ª•ng t·ª´ t·ªáp JSON
def load_usage_data():
    if os.path.exists(GAY_TEST_FILE):
        with open(GAY_TEST_FILE, 'r') as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {}
    return {}

# H√†m l∆∞u th√¥ng tin s·ª≠ d·ª•ng v√†o t·ªáp JSON
def save_usage_data(data):
    with open(GAY_TEST_FILE, 'w') as f:
        json.dump(data, f)

# H√†m x·ª≠ l√Ω ƒëo ƒë·ªô gay
def handle_gay_test(message, message_object, thread_id, thread_type, author_id, client):
    # G·ª≠i ph·∫£n ·ª©ng ngay khi ng∆∞·ªùi d√πng so·∫°n ƒë√∫ng l·ªánh
    action = "‚úÖ"
    client.sendReaction(message_object, action, thread_id, thread_type, reactionType=75)
    mentions = message_object.mentions  # L·∫•y danh s√°ch ng∆∞·ªùi d√πng ƒë∆∞·ª£c tag
    usage_data = load_usage_data()  # T·∫£i th√¥ng tin s·ª≠ d·ª•ng

    # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ ai ƒë∆∞·ª£c tag
    if not mentions or len(mentions) < 1:
        client.replyMessage(
            Message(text="C√∫ ph√°p: deptrai @t√™nng∆∞·ªùid√πng."),
            message_object, thread_id, thread_type,ttl=10000
        )
        return

    # L·∫•y ID v√† t√™n c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c tag
    person_id = mentions[0].id
    person_name = mentions[0].name

    # Ki·ªÉm tra s·ªë l·∫ßn s·ª≠ d·ª•ng
    now = datetime.now()

    # N·∫øu ng∆∞·ªùi n√†y ƒë√£ t·ª´ng ƒë∆∞·ª£c t√≠nh ph·∫ßn trƒÉm tr∆∞·ªõc ƒë√≥, l·∫•y l·∫°i gi√° tr·ªã ƒë√≥
    if person_id in usage_data:
        gay_percentage = usage_data[person_id]['gay_percentage']
        last_used = datetime.fromisoformat(usage_data[person_id]['last_used'])
        count = usage_data[person_id]['count']

        # Ki·ªÉm tra xem ƒë√£ s·ª≠ d·ª•ng qu√° s·ªë l·∫ßn cho ph√©p trong 24 gi·ªù ch∆∞a
        if count >= 2 and now < last_used + timedelta(days=1):
            time_remaining = (last_used + timedelta(days=1) - now).total_seconds()
            hours_remaining = int(time_remaining // 3600)
            minutes_remaining = int((time_remaining % 3600) // 60)
            client.replyMessage(
                Message(text=f"{person_name} ƒë√£ s·ª≠ d·ª•ng qu√° s·ªë l·∫ßn cho ph√©p. Vui l√≤ng quay l·∫°i sau {hours_remaining} gi·ªù {minutes_remaining} ph√∫t."),
                message_object, thread_id, thread_type,ttl=10000
            )
            return

        # C·∫≠p nh·∫≠t s·ªë l·∫ßn s·ª≠ d·ª•ng v√† th·ªùi gian g·∫ßn nh·∫•t
        usage_data[person_id]['count'] += 1
        usage_data[person_id]['last_used'] = str(now)
    else:
        # N·∫øu ƒë√¢y l√† l·∫ßn ƒë·∫ßu ti√™n, t·∫°o ng·∫´u nhi√™n ph·∫ßn trƒÉm ƒë·ªô deptrai v√† l∆∞u l·∫°i
        gay_percentage = random.randint(1, 100)
        usage_data[person_id] = {
            'gay_percentage': gay_percentage,
            'count': 1,
            'last_used': str(now)
        }

    # L∆∞u l·∫°i th√¥ng tin s·ª≠ d·ª•ng
    save_usage_data(usage_data)

    # Ph·∫£n h·ªìi k·∫øt qu·∫£ v·ªõi ph·∫ßn trƒÉm deptrai ƒë√£ l∆∞u
    client.replyMessage(
        Message(text=f"ng∆∞·ªùi ƒë∆∞·ª£c b·∫°n tag c√≥ ƒë·ªô ƒë·∫πp l√† {gay_percentage}%üí§"),
        message_object, thread_id, thread_type, ttl=120000
    )

# H√†m tr·∫£ v·ªÅ l·ªánh c·ªßa bot
def get_mitaizl():
    return {
        'deptrai': handle_gay_test
    }