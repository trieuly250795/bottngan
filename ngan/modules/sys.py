from zlapi.models import Message, MessageStyle
import platform
import psutil
import cpuinfo
import time
from datetime import datetime, timezone, timedelta
import subprocess

# Th·ªùi ƒëi·ªÉm bot kh·ªüi ch·∫°y ƒë·ªÉ t√≠nh th·ªùi gian ho·∫°t ƒë·ªông (uptime)
bot_start_time = time.time()

des = {
    't√°c gi·∫£': "Rosy",
    'm√¥ t·∫£': "Ki·ªÉm tra th√¥ng tin h·ªá th·ªëng v√† th·ªùi gian ho·∫°t ƒë·ªông c·ªßa bot",
    't√≠nh nƒÉng': [
        "üîç L·∫•y th√¥ng tin h·ªá th·ªëng nh∆∞ CPU, RAM, b·ªô nh·ªõ ƒëƒ©a, h·ªá ƒëi·ªÅu h√†nh, v√† tr·∫°ng th√°i ping.",
        "‚è±Ô∏è T√≠nh th·ªùi gian ho·∫°t ƒë·ªông c·ªßa bot (uptime).",
        "üìÖ Hi·ªÉn th·ªã th·ªùi gian hi·ªán t·∫°i theo m√∫i gi·ªù Vi·ªát Nam.",
        "üñ•Ô∏è L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ lo·∫°i RAM, t·∫ßn s·ªë CPU v√† h·ªá ƒëi·ªÅu h√†nh.",
        "üìä ƒêo ping ƒë·∫øn m·ªôt m√°y ch·ªß v√† ƒë√°nh gi√° tr·∫°ng th√°i ping.",
        "üîî Th√¥ng b√°o k·∫øt qu·∫£ ki·ªÉm tra v√† th·ªùi gian th·ª±c thi l·ªánh."
    ],
    'h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng': [
        "üì© G·ª≠i l·ªánh sys ƒë·ªÉ ki·ªÉm tra th√¥ng tin h·ªá th·ªëng v√† th·ªùi gian ho·∫°t ƒë·ªông c·ªßa bot.",
        "üìå V√≠ d·ª•: sys ƒë·ªÉ nh·∫≠n th√¥ng tin chi ti·∫øt v·ªÅ h·ªá th·ªëng v√† th·ªùi gian ho·∫°t ƒë·ªông c·ªßa bot.",
        "‚úÖ Nh·∫≠n th√¥ng b√°o tr·∫°ng th√°i v√† k·∫øt qu·∫£ ki·ªÉm tra ngay l·∫≠p t·ª©c."
    ]
}


def system_info():
    measure_start = time.time()
    vn_timezone = timezone(timedelta(hours=7))
    current_time = datetime.now(vn_timezone).strftime("%d-%m-%Y %H:%M:%S")
    cpu = cpuinfo.get_cpu_info()
    cpu_percent = psutil.cpu_percent(interval=1)
    cpu_physical_cores = psutil.cpu_count(logical=False)
    cpu_total_cores = psutil.cpu_count(logical=True)
    ram_info = psutil.virtual_memory()
    ram_used = ram_info.used / (1024 ** 3)
    ram_total = ram_info.total / (1024 ** 3)
    ram_available = ram_info.available / (1024 ** 3)
    ram_percent = ram_info.percent
    ram_type = get_ram_type()
    swap_info = psutil.swap_memory()
    swap_used = swap_info.used / (1024 ** 3)
    swap_total = swap_info.total / (1024 ** 3)
    swap_percent = swap_info.percent
    disk_info = psutil.disk_usage('/')
    disk_used = disk_info.used / (1024 ** 3)
    disk_total = disk_info.total / (1024 ** 3)
    system = platform.system()
    version = platform.version()
    ping_time = measure_ping()
    ping_status = evaluate_ping(ping_time)
    measure_end = time.time()
    execution_time = measure_end - measure_start
    _, rem = divmod(execution_time, 3600)
    minutes, seconds = divmod(rem, 60)
    
    info_text = f"""
üïí Th·ªùi gian hi·ªán t·∫°i: {current_time}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíª Th√¥ng tin CPU:
   ‚î£‚îÅ ‚öôÔ∏è CPU: {cpu['brand_raw']}
   ‚î£‚îÅ üî≤ Lo·∫°i CPU: {cpu['arch']}
   ‚î£‚îÅ üî¥ S·ªë nh√¢n v·∫≠t l√Ω: {cpu_physical_cores}
   ‚î£‚îÅ üü° S·ªë nh√¢n logic: {cpu_total_cores}
   ‚î£‚îÅ üìä T·∫ßn s·ªë: {cpu['hz_actual_friendly']}
   ‚îó‚îÅ üìà S·ª≠ d·ª•ng CPU: {cpu_percent}%
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üè∑Ô∏èTh√¥ng tin RAM:
   ‚î£‚îÅ üü° ƒê√£ d√πng: {ram_used:.2f}GB / {ram_total:.2f}GB
   ‚î£‚îÅ üü¢ Kh·∫£ d·ª•ng: {ram_available:.2f}GB
   ‚î£‚îÅ üî¥ T·ª∑ l·ªá RAM ƒë√£ d√πng: {ram_percent}%
   ‚îó‚îÅ üè∑Ô∏è Lo·∫°i RAM: {ram_type}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üè∑Ô∏è Swap Memory (B·ªô nh·ªõ ·∫£o):
   ‚î£‚îÅ üü° ƒê√£ d√πng: {swap_used:.2f}GB / {swap_total:.2f}GB
   ‚îó‚îÅ üî¥ T·ª∑ l·ªá ƒë√£ d√πng: {swap_percent}%
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üóÉÔ∏è  Disk:
   ‚îó‚îÅ {disk_used:.2f}GB / {disk_total:.2f}GB
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üñ•Ô∏è  Th√¥ng tin h·ªá ƒëi·ªÅu h√†nh:
   ‚î£‚îÅ üè∑Ô∏è H·ªá ƒëi·ªÅu h√†nh: {system}
   ‚îó‚îÅ üè∑Ô∏è Phi√™n b·∫£n: {version}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üåê Ping: {ping_time if ping_time is not None else "Kh√¥ng th·ªÉ ƒëo"} ms ({ping_status})
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚è±Ô∏è  Th·ªùi gian l·∫•y th√¥ng tin: {seconds:.2f} gi√¢y
"""

    return info_text

def get_ram_type():
    system = platform.system()
    if system == "Windows":
        try:
            output = subprocess.check_output("wmic memorychip get MemoryType", shell=True, universal_newlines=True)
            lines = output.splitlines()
            if len(lines) > 1:
                ram_type_code = lines[1].strip()
                if ram_type_code.isdigit():
                    ram_type_code = int(ram_type_code)
                    ram_types = {
                        0: "Unknown",
                        1: "Other",
                        2: "DRAM",
                        3: "Synchronous DRAM",
                        4: "Cache DRAM",
                        5: "EDO",
                        6: "EDRAM",
                        7: "VRAM",
                        8: "SRAM",
                        9: "RAM",
                        10: "ROM",
                        11: "Flash",
                        12: "EEPROM",
                        13: "FEPROM",
                        14: "EPROM",
                        15: "CDRAM",
                        16: "3DRAM",
                        17: "SDRAM",
                        18: "SGRAM",
                        19: "RDRAM",
                        20: "DDR",
                        21: "DDR2",
                        22: "DDR2 FB-DIMM",
                        24: "DDR3",
                        25: "FBD2",
                        26: "DDR4",
                    }
                    return ram_types.get(ram_type_code, "Unknown")
            return "Kh√¥ng th·ªÉ x√°c ƒë·ªãnh lo·∫°i RAM"
        except Exception as e:
            return f"L·ªói khi l·∫•y lo·∫°i RAM: {str(e)}"
    elif system == "Linux":
        try:
            output = subprocess.check_output("dmidecode --type 17", shell=True, universal_newlines=True)
            for line in output.splitlines():
                if "Type:" in line and "Type Detail:" not in line:
                    return line.split(":")[1].strip()
            return "Kh√¥ng t√¨m th·∫•y th√¥ng tin lo·∫°i RAM"
        except Exception as e:
            return f"L·ªói khi l·∫•y lo·∫°i RAM: {str(e)}"
    return "Kh√¥ng th·ªÉ x√°c ƒë·ªãnh lo·∫°i RAM"

def measure_ping(host="google.com"):
    try:
        output = subprocess.check_output(
            f"ping -n 1 {host}" if platform.system() == "Windows" else f"ping -c 1 {host}",
            shell=True, universal_newlines=True
        )
        for line in output.splitlines():
            if "time=" in line:
                ping_time = line.split("time=")[1].split("ms")[0].strip()
                return float(ping_time)
    except subprocess.CalledProcessError:
        return None

def evaluate_ping(ping_time):
    if ping_time is None:
        return "Kh√¥ng th·ªÉ ƒëo"
    elif ping_time < 50:
        return "M∆∞·ª£t"
    elif 50 <= ping_time < 150:
        return "B√¨nh th∆∞·ªùng"
    else:
        return "Ch·∫≠m"

def check_info(message, message_object, thread_id, thread_type, author_id, client):
    # G·ª≠i ph·∫£n ·ª©ng ngay khi ng∆∞·ªùi d√πng so·∫°n ƒë√∫ng l·ªánh
    action = "‚úÖ"
    client.sendReaction(message_object, action, thread_id, thread_type, reactionType=75)
    # T√≠nh th·ªùi gian ho·∫°t ƒë·ªông c·ªßa bot
    uptime_seconds = int(time.time() - bot_start_time)
    days = uptime_seconds // (24 * 3600)
    uptime_seconds %= (24 * 3600)
    hours = uptime_seconds // 3600
    uptime_seconds %= 3600
    minutes = uptime_seconds // 60
    seconds = uptime_seconds % 60
    uptime_message = f"Bot ƒë√£ online: {days} NG√ÄY, {hours} GI·ªú, {minutes} PH√öT, {seconds} GI√ÇY"
    
    sys_info = system_info()
    combined_info = f"{uptime_message}\n{sys_info}"
    
    font_style = MessageStyle(
        style="font",
        size="13",
        offset=0,
        length=len(combined_info),
        auto_format=False
    )
    final_message = Message(text=combined_info, style=font_style)
    client.sendMessage(final_message, thread_id, thread_type, ttl=60000)

def get_mitaizl():
    return {
        'sys': check_info
    }
