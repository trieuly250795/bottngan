import os
import json
import random
import requests
from zlapi import ZaloAPI
from zlapi.models import Message

des = {
    't√°c gi·∫£': "Xu√¢n B√°ch",
    'm√¥ t·∫£': "G·ª≠i ·∫£nh ho·∫∑c video t·ª´ ƒë∆∞·ªùng link do ng∆∞·ªùi d√πng cung c·∫•p.",
    't√≠nh nƒÉng': [
        "üì§ H·ªó tr·ª£ g·ª≠i ·∫£nh (.jpg, .jpeg, .png, .gif) v√† video (.mp4, .mov) t·ª´ URL.",
        "‚è≥ T·∫£i xu·ªëng v√† g·ª≠i media t·ª± ƒë·ªông.",
        "üîç Ki·ªÉm tra ƒë·ªãnh d·∫°ng file tr∆∞·ªõc khi g·ª≠i.",
        "üñºÔ∏è H·ªó tr·ª£ g·ª≠i ·∫£nh tr·ª±c ti·∫øp t·ª´ m√°y ch·ªß.",
        "üé• G·ª≠i video t·ª´ link v·ªõi ·∫£nh thu nh·ªè m·∫∑c ƒë·ªãnh.",
        "‚ö° X·ª≠ l√Ω nhanh ch√≥ng v√† ph·∫£n h·ªìi ngay l·∫≠p t·ª©c.",
        "‚ùå Th√¥ng b√°o l·ªói c·ª• th·ªÉ n·∫øu ƒë∆∞·ªùng link kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng th·ªÉ t·∫£i xu·ªëng."
    ],
    'h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng': [
        "üì© D√πng l·ªánh 'media [link ·∫£nh/video]' ƒë·ªÉ g·ª≠i media t·ª´ ƒë∆∞·ªùng link.",
        "üìå V√≠ d·ª•: media https://example.com/image.jpg ƒë·ªÉ g·ª≠i ·∫£nh.",
        "üìå V√≠ d·ª•: media https://example.com/video.mp4 ƒë·ªÉ g·ª≠i video.",
        "‚úÖ Nh·∫≠n ph·∫£n h·ªìi ngay khi media ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng."
    ]
}

def download_media(link, file_extension):
    try:
        response = requests.get(link, stream=True)
        response.raise_for_status()
        file_path = f"temp_media.{file_extension}"
        with open(file_path, 'wb') as media_file:
            for chunk in response.iter_content(1024):
                media_file.write(chunk)
        return file_path
    except Exception as e:
        print(f"L·ªói khi t·∫£i media: {str(e)}")
        return None


def handle_media_command(message, message_object, thread_id, thread_type, author_id, client):
    try:

        link = message.split()[1] if len(message.split()) > 1 else None
        if not link:
            client.send(
                Message(text="Vui l√≤ng cung c·∫•p li√™n k·∫øt media (·∫£nh ho·∫∑c video)."),
                thread_id=thread_id,
                thread_type=thread_type
            )
            return


        if link.endswith(('.jpg', '.jpeg', '.png', '.gif')):

            file_path = download_media(link, "jpg")
            if file_path:
                client.sendLocalImage(file_path, thread_id=thread_id, thread_type=thread_type)
                os.remove(file_path)
            else:
                raise ValueError("L·ªói khi t·∫£i ·∫£nh.")
        elif link.endswith(('.mp4', '.mov')):
            client.sendRemoteVideo(
                videoUrl=link,
                thumbnailUrl="https://i.imgur.com/tAmVhh5.mp4", 
                duration=15000, 
                thread_id=thread_id,
                thread_type=thread_type,
                message=Message(text=""),
                width=1080,
                height=1920
            )
        else:
            client.send(
                Message(text="Li√™n k·∫øt kh√¥ng h·ª£p l·ªá. Ch·ªâ h·ªó tr·ª£ ·∫£nh (.jpg, .jpeg, .png, .gif) v√† video (.mp4, .mov)."),
                thread_id=thread_id,
                thread_type=thread_type
            )
    except Exception as e:
        error_message = f"L·ªói x·∫£y ra: {str(e)}"
        client.send(
            Message(text=error_message),
            thread_id=thread_id,
            thread_type=thread_type
        )

def get_mitaizl():
    return {
        'media': handle_media_command
    }