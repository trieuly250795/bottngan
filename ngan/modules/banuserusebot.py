import json
import os
import random

from zlapi.models import Message, MessageStyle, MultiMsgStyle
from config import ADMIN, PREFIX

# ƒê∆∞·ªùng d·∫´n file l∆∞u tr·ªØ danh s√°ch ng∆∞·ªùi d√πng b·ªã c·∫•m
BANNED_USERS_FILE = "banned_users.json"

def load_banned_users():
    """
    T·∫£i d·ªØ li·ªáu t·ª´ file JSON ch·ª©a danh s√°ch ng∆∞·ªùi d√πng b·ªã c·∫•m.
    N·∫øu file kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói ƒë·ªãnh d·∫°ng, tr·∫£ v·ªÅ danh s√°ch r·ªóng.
    """
    if not os.path.exists(BANNED_USERS_FILE):
        return []
    try:
        with open(BANNED_USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        print(f"L·ªói t·∫£i danh s√°ch ng∆∞·ªùi d√πng b·ªã c·∫•m: {str(e)}")
        return []

def save_banned_users(banned_users):
    """L∆∞u danh s√°ch ng∆∞·ªùi d√πng b·ªã c·∫•m v√†o file JSON v·ªõi ƒë·ªãnh d·∫°ng UTF-8."""
    with open(BANNED_USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(banned_users, f, ensure_ascii=False, indent=4)

def add_banned_user(user_id, user_name):
    """
    Th√™m ng∆∞·ªùi d√πng v√†o danh s√°ch c·∫•m d·ª±a theo user_id v√† user_name.
    Tr·∫£ v·ªÅ True n·∫øu th√™m th√†nh c√¥ng, False n·∫øu user_id ƒë√£ t·ªìn t·∫°i.
    """
    banned_users = load_banned_users()
    for user in banned_users:
        if user.get("user_id") == user_id:
            return False
    banned_users.append({"user_id": user_id, "user_name": user_name})
    save_banned_users(banned_users)
    return True

def remove_banned_user(user_id):
    """
    X√≥a ng∆∞·ªùi d√πng kh·ªèi danh s√°ch c·∫•m.
    Tr·∫£ v·ªÅ True n·∫øu x√≥a th√†nh c√¥ng, False n·∫øu user_id kh√¥ng t·ªìn t·∫°i.
    """
    banned_users = load_banned_users()
    for user in banned_users:
        if user.get("user_id") == user_id:
            banned_users.remove(user)
            save_banned_users(banned_users)
            return True
    return False

def list_banned_users():
    """Tr·∫£ v·ªÅ danh s√°ch ng∆∞·ªùi d√πng b·ªã c·∫•m."""
    return load_banned_users()

def send_reply_with_style(client, text, message_object, thread_id, thread_type, ttl=30000, color="#000000"):
    """
    G·ª≠i tin nh·∫Øn ph·∫£n h·ªìi v·ªõi ƒë·ªãnh d·∫°ng m√†u s·∫Øc v√† in ƒë·∫≠m.
    TTL ƒë∆∞·ª£c ƒë·∫∑t m·∫∑c ƒë·ªãnh l√† 30000.
    """
    base_length = len(text)
    adjusted_length = base_length + 355  # ƒê·∫£m b·∫£o √°p d·ª•ng style cho to√†n b·ªô tin nh·∫Øn
    style = MultiMsgStyle([
        MessageStyle(
            offset=0,
            length=adjusted_length,
            style="color",
            color=color,
            auto_format=False,
        ),
        MessageStyle(
            offset=0,
            length=adjusted_length,
            style="bold",
            size="8",
            auto_format=False
        )
    ])
    msg = Message(text=text, style=style)
    client.replyMessage(msg, message_object, thread_id, thread_type, ttl=ttl)

def fetch_target_info(target_input, message_object, client, command_prefix):
    """
    X√°c ƒë·ªãnh target_id t·ª´ tag ho·∫∑c tham s·ªë nh·∫≠p v√† l·∫•y th√¥ng tin ng∆∞·ªùi d√πng.
    Tr·∫£ v·ªÅ tuple (target_id, target_name) ho·∫∑c None n·∫øu c√≥ l·ªói.
    """
    # ∆Øu ti√™n s·ª≠ d·ª•ng th√¥ng tin t·ª´ tag n·∫øu c√≥
    if message_object.mentions and len(message_object.mentions) > 0:
        target_id = message_object.mentions[0]['uid']
    else:
        target_id = target_input.strip()
    if not target_id:
        return None

    try:
        # L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ API
        info_response = client.fetchUserInfo(target_id)
        profiles = info_response.unchanged_profiles or info_response.changed_profiles
        target_info = profiles[str(target_id)]
        
        # N·∫øu target_info l√† dictionary th√¨ l·∫•y theo key, n·∫øu kh√¥ng th√¨ d√πng getattr
        if isinstance(target_info, dict):
            target_name = target_info.get("zaloName") or target_info.get("username") or target_info.get("name")
        else:
            target_name = getattr(target_info, 'zaloName', None) or getattr(target_info, 'username', None) or getattr(target_info, 'name', None)
        
        if not target_name:
            target_name = "Unknown"
        else:
            target_name = str(target_name)
        return target_id, target_name
    except Exception as e:
        print(f"L·ªói fetch th√¥ng tin cho target {target_id}: {e}")
        return None

def handle_addban_command(message, message_object, thread_id, thread_type, author_id, client):
    """
    X·ª≠ l√Ω l·ªánh th√™m ng∆∞·ªùi d√πng v√†o danh s√°ch c·∫•m.
    
    H·ªó tr·ª£:
      - addban <id ng∆∞·ªùi d√πng>
      - addban (v·ªõi tag ng∆∞·ªùi d√πng)
      
    C√°ch s·ª≠ d·ª•ng:
      - V√≠ d·ª•: `{PREFIX}addban 123456789` ƒë·ªÉ th√™m ng∆∞·ªùi d√πng v·ªõi ID 123456789.
      - Ho·∫∑c tag ng∆∞·ªùi d√πng r·ªìi g√µ l·ªánh: `{PREFIX}addban` (bot s·∫Ω l·∫•y uid c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c tag).
    """
    # Ki·ªÉm tra quy·ªÅn admin
    if author_id != ADMIN:
        error_msg = Message(text="‚ùå Ch·ªâ admin m·ªõi c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        client.sendMessage(error_msg, thread_id, thread_type)
        return

    command_prefix = "addban"
    param = message[len(command_prefix):].strip()

    target = fetch_target_info(param, message_object, client, command_prefix)
    if target is None:
        error_msg = Message(text=f"C√∫ ph√°p: {PREFIX}addban <id> ho·∫∑c tag ng∆∞·ªùi d√πng.\nKh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng.")
        client.sendMessage(error_msg, thread_id, thread_type)
        return

    target_id, target_name = target

    if add_banned_user(target_id, target_name):
        reply_text = f"‚úÖ ƒê√£ th√™m ng∆∞·ªùi d√πng:\nüë§ {target_name}\nüÜî {target_id}\n v√†o danh s√°ch c·∫•m giao ti·∫øp v·ªõi bot."
    else:
        reply_text = f"‚ö†Ô∏è Ng∆∞·ªùi d√πng: {target_name}\nüÜî {target_id}\n ƒë√£ t·ªìn t·∫°i trong danh s√°ch c·∫•m."
    send_reply_with_style(client, reply_text, message_object, thread_id, thread_type, ttl=30000)

def handle_delban_command(message, message_object, thread_id, thread_type, author_id, client):
    """
    X·ª≠ l√Ω l·ªánh x√≥a ng∆∞·ªùi d√πng kh·ªèi danh s√°ch c·∫•m.
    
    H·ªó tr·ª£:
      - delban <id ng∆∞·ªùi d√πng>
      - delban (v·ªõi tag ng∆∞·ªùi d√πng)
      
    C√°ch s·ª≠ d·ª•ng:
      - V√≠ d·ª•: `{PREFIX}delban 123456789` ƒë·ªÉ x√≥a ng∆∞·ªùi d√πng v·ªõi ID 123456789.
      - Ho·∫∑c tag ng∆∞·ªùi d√πng r·ªìi g√µ l·ªánh: `{PREFIX}delban` (bot s·∫Ω l·∫•y uid c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c tag).
    """
    # Ki·ªÉm tra quy·ªÅn admin
    if author_id != ADMIN:
        error_msg = Message(text="‚ùå Ch·ªâ admin m·ªõi c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        client.sendMessage(error_msg, thread_id, thread_type)
        return

    command_prefix = "delban"
    param = message[len(command_prefix):].strip()

    target = fetch_target_info(param, message_object, client, command_prefix)
    if target is None:
        error_msg = Message(text=f"C√∫ ph√°p: {PREFIX}delban <id> ho·∫∑c tag ng∆∞·ªùi d√πng.\nKh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng.")
        client.sendMessage(error_msg, thread_id, thread_type)
        return

    target_id, target_name = target

    if remove_banned_user(target_id):
        reply_text = f"‚ùå ƒê√£ x√≥a ng∆∞·ªùi d√πng:\nüë§ {target_name}\nüÜî {target_id}\n kh·ªèi danh s√°ch c·∫•m giao ti·∫øp v·ªõi bot."
    else:
        reply_text = f"‚ö†Ô∏è Ng∆∞·ªùi d√πng v·ªõi ID: {target_id} kh√¥ng t·ªìn t·∫°i trong danh s√°ch c·∫•m."
    send_reply_with_style(client, reply_text, message_object, thread_id, thread_type, ttl=30000)

def handle_listban_command(message, message_object, thread_id, thread_type, author_id, client):
    """
    X·ª≠ l√Ω l·ªánh xem danh s√°ch ng∆∞·ªùi d√πng b·ªã c·∫•m.
    
    C√°ch s·ª≠ d·ª•ng:
      - V√≠ d·ª•: `{PREFIX}listban` ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng c·∫•m giao ti·∫øp v·ªõi bot.
    """
    # Ki·ªÉm tra quy·ªÅn admin
    if author_id != ADMIN:
        error_msg = Message(text="‚ùå Ch·ªâ admin m·ªõi c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        client.sendMessage(error_msg, thread_id, thread_type)
        return

    banned_users = list_banned_users()
    if not banned_users:
        reply_text = "Danh s√°ch ng∆∞·ªùi d√πng c·∫•m giao ti·∫øp v·ªõi bot tr·ªëng."
    else:
        reply_text = "Danh s√°ch ng∆∞·ªùi d√πng c·∫•m giao ti·∫øp v·ªõi bot:\n" + "\n".join(
            [f"{i+1}.   {usr['user_name']}\nüÜî {usr['user_id']}" for i, usr in enumerate(banned_users)]
        )
    send_reply_with_style(client, reply_text, message_object, thread_id, thread_type, ttl=30000)

def get_mitaizl():
    """
    Tr·∫£ v·ªÅ m·ªôt dictionary √°nh x·∫° l·ªánh t·ªõi c√°c h√†m x·ª≠ l√Ω t∆∞∆°ng ·ª©ng cho qu·∫£n l√Ω ng∆∞·ªùi d√πng b·ªã c·∫•m.
    
    C√°c l·ªánh h·ªó tr·ª£:
      - addban: Th√™m ng∆∞·ªùi d√πng v√†o danh s√°ch c·∫•m (theo tag ho·∫∑c ID)
      - delban: X√≥a ng∆∞·ªùi d√πng kh·ªèi danh s√°ch c·∫•m (theo tag ho·∫∑c ID)
      - listban: Hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng c·∫•m giao ti·∫øp v·ªõi bot
    """
    return {
        'addban': handle_addban_command,
        'delban': handle_delban_command,
        'listban': handle_listban_command
    }
