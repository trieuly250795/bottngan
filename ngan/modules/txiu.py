
import json
import random
import os
import time
import threading
import io
from PIL import Image, ImageDraw, ImageFont
import matplotlib.pyplot as plt
from zlapi.models import Message, Mention, MessageStyle, MultiMsgStyle

# -------------------------------
# M√¥ t·∫£ module
des = {
    't√°c gi·∫£': "Rosy & ChatGPT",
    'm√¥ t·∫£': "Ch∆°i T√†i X·ªâu theo v√≤ng, v·ªõi ·∫£nh h∆∞·ªõng d·∫´n khi m·ªü v√≤ng v√† ·∫£nh k·∫øt qu·∫£ khi k·∫øt th√∫c v√≤ng c∆∞·ª£c",
    't√≠nh nƒÉng': [
        "üé≤ Ch·∫ø ƒë·ªô ch∆°i theo v√≤ng: 'taixiu on' ho·∫∑c 'txiu on' m·ªü v√≤ng ƒë·∫∑t c∆∞·ª£c 30 gi√¢y.",
        "üì∏ G·ª≠i ·∫£nh h∆∞·ªõng d·∫´n khi ng∆∞·ªùi ch∆°i so·∫°n l·ªánh m·ªü v√≤ng c∆∞·ª£c.",
        "üïí Cho ph√©p ng∆∞·ªùi ch∆°i ƒë·∫∑t c∆∞·ª£c b·∫±ng l·ªánh txiu <t√†i/x·ªâu/ch·∫µn/l·∫ª> <s·ªë ti·ªÅn/all/%s·ªë ti·ªÅn> ho·∫∑c k·∫øt h·ª£p ƒë·∫∑t c∆∞·ª£c (txiu <t√†i/x·ªâu> <s·ªë ti·ªÅn/all/%s·ªë ti·ªÅn> <ch·∫µn/l·∫ª> <s·ªë ti·ªÅn/all/%s·ªë ti·ªÅn>) trong 30 gi√¢y.",
        "üì∏ Sau v√≤ng, g·ª≠i ·∫£nh k·∫øt qu·∫£ v·ªõi danh s√°ch ng∆∞·ªùi th·∫Øng, s·ªë ti·ªÅn ƒë·∫∑t c∆∞·ª£c t·ª´ng ng∆∞·ªùi, s·ªë d∆∞ cu·ªëi v√† th√¥ng tin H≈© (s·ªë ti·ªÅn & ti·∫øn tr√¨nh n·ªï h≈©).",
        "üí∏ C·∫≠p nh·∫≠t v√≠, l·ªãch s·ª≠, jackpot v√† t√≠ch h·ª£p c√°c ch·ª©c nƒÉng soi c·∫ßu, xem phi√™n tr∆∞·ªõc, l·ªãch s·ª≠ chi·∫øn t√≠ch nh∆∞ phi√™n b·∫£n c≈©."
    ],
    'h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng': [
        "üì© G·ª≠i l·ªánh taixiu on ho·∫∑c txiu on ƒë·ªÉ m·ªü v√≤ng c∆∞·ª£c.",
        "üì© Trong v√≤ng 30 gi√¢y, g·ª≠i l·ªánh txiu <t√†i/x·ªâu/ch·∫µn/l·∫ª> <s·ªë ti·ªÅn/all/%s·ªë ti·ªÅn> ho·∫∑c txiu <t√†i/x·ªâu> <s·ªë ti·ªÅn/all/%s·ªë ti·ªÅn> <ch·∫µn/l·∫ª> <s·ªë ti·ªÅn/all/%s·ªë ti·ªÅn> ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c.",
        "üì© Sau v√≤ng, h·ªá th·ªëng s·∫Ω th√¥ng b√°o k·∫øt qu·∫£ b·∫±ng tin nh·∫Øn v√† ·∫£nh k·∫øt qu·∫£.",
        "üì© C√°c l·ªánh kh√°c: soi, xemphientruoc, lichsu, dsnohu, dudoan."
    ]
}

# -------------------------------
# C√°c h·∫±ng s·ªë v√† file d·ªØ li·ªáu
MONEY_DATA_FILE   = 'modules/cache/money.json'
HISTORY_DATA_FILE = 'modules/cache/taixiu_history.json'
JACKPOT_DATA_FILE = 'modules/cache/jackpot.json'
CURRENT_SOICAU_FILE = 'modules/cache/soicau_current.json'
OLD_SOICAU_FILE   = 'modules/cache/soicau_old.json'

# -------------------------------
# H√†m h·ªó tr·ª£ ƒë·ªçc/ghi file JSON
def load_json(filepath, default):
    try:
        with open(filepath, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return default

def save_json(filepath, data):
    with open(filepath, 'w') as f:
        json.dump(data, f, indent=4)

# -------------------------------
# C√°c h√†m x·ª≠ l√Ω d·ªØ li·ªáu v√≠ ti·ªÅn v√† l·ªãch s·ª≠
def load_money_data():
    return load_json(MONEY_DATA_FILE, {})

def save_money_data(data):
    save_json(MONEY_DATA_FILE, data)

def format_money(amount):
    return f"{amount:,} VNƒê"

def load_history_data():
    return load_json(HISTORY_DATA_FILE, {})

def save_history_data(data):
    save_json(HISTORY_DATA_FILE, data)

def get_user_name(client, user_id):
    try:
        user_info = client.fetchUserInfo(user_id)
        profiles = user_info.unchanged_profiles or user_info.changed_profiles
        return profiles.get(user_id, {}).get('zaloName', 'Kh√¥ng x√°c ƒë·ªãnh')
    except AttributeError:
        return 'Kh√¥ng x√°c ƒë·ªãnh'

# -------------------------------
# H√†m gh√©p h√¨nh ·∫£nh (merge)
def merge_images(image_paths, output_path):
    images = []
    for img_path in image_paths:
        if os.path.exists(img_path):
            try:
                images.append(Image.open(img_path))
            except Exception as e:
                print(f"L·ªói m·ªü ·∫£nh {img_path}: {e}")
    if not images:
        return None
    total_width = sum(img.width for img in images)
    max_height = max(img.height for img in images)
    new_image = Image.new('RGB', (total_width, max_height))
    x_offset = 0
    for img in images:
        new_image.paste(img, (x_offset, 0))
        x_offset += img.width
    new_image.save(output_path)
    return output_path

# -------------------------------
# H√†m x·ª≠ l√Ω d·ªØ li·ªáu jackpot
def load_jackpot_data():
    data = load_json(JACKPOT_DATA_FILE, {})
    if not isinstance(data, dict) or "counter" not in data:
        return {"pool": 0, "counter": 100, "participants": []}
    return data

def save_jackpot_data(data):
    save_json(JACKPOT_DATA_FILE, data)

# -------------------------------
# H√†m x·ª≠ l√Ω d·ªØ li·ªáu soi c·∫ßu (phi√™n hi·ªán t·∫°i v√† phi√™n c≈©)
def load_current_soicau_data():
    return load_json(CURRENT_SOICAU_FILE, [])

def save_current_soicau_data(data):
    save_json(CURRENT_SOICAU_FILE, data)

def load_old_soicau_data():
    return load_json(OLD_SOICAU_FILE, [])

def save_old_soicau_data(data):
    save_json(OLD_SOICAU_FILE, data)

# -------------------------------
# N·∫°p font (n·∫øu c√≥)
try:
    FONT_TITLE = ImageFont.truetype("modules/cache/fonts/FrancoisOne-Regular.ttf", 26)
    FONT_TEXT  = ImageFont.truetype("modules/cache/fonts/Kanit-Medium.ttf", 26)
    FONT_SMALL = ImageFont.truetype("modules/cache/fonts/Kanit-Medium.ttf", 27)
except Exception:
    FONT_TITLE = ImageFont.load_default()
    FONT_TEXT  = ImageFont.load_default()
    FONT_SMALL = ImageFont.load_default()

# -------------------------------
def draw_multiline_centered_in_rect(
    draw_obj,          # ƒê·ªëi t∆∞·ª£ng ImageDraw
    lines,             # Danh s√°ch c√°c d√≤ng text (list[str])
    font,              # Font
    rect,              # T·ªça ƒë·ªô (x1, y1, x2, y2)
    fill_color="red",
    shadow=False,
    line_spacing=5,
    shift_x=110  # Th√™m tham s·ªë shift_x, m·∫∑c ƒë·ªãnh = 0
):
    x1, y1, x2, y2 = rect
    rect_w = x2 - x1
    rect_h = y2 - y1
    
    total_text_height = 0
    line_heights = []
    for line in lines:
        w, h = font.getbbox(line)[2:]
        line_heights.append(h)
        total_text_height += (h + line_spacing)
    total_text_height -= line_spacing

    current_y = y1 + (rect_h - total_text_height) // 2

    for line in lines:
        text_w, text_h = font.getbbox(line)[2:]
        x_mid = x1 + (rect_w - text_w) // 2
        x_mid -= shift_x
        if shadow:
            draw_obj.text((x_mid+1, current_y+1), line, font=font, fill="black")
        draw_obj.text((x_mid, current_y), line, font=font, fill=fill_color)
        current_y += (text_h + line_spacing)
        
# H√†m t·∫°o ·∫£nh x√∫c x·∫Øc theo h√¨nh tam gi√°c
def merge_dice_images_triangle(
    dice_image_paths, bet_amount, choice,
    output_path="modules/cache/datatx/merged_dice.png",
    mode="individual",
    total_tai=None, total_xiu=None,
    total_chan=None, total_le=None, dice_sum=None, tai_or_xiu=None, chan_or_le=None
):
    import math
    try:
        background = Image.open("modules/cache/datatx/table_bg3.png")
        width, height = background.size
    except FileNotFoundError:
        width, height = 1000, 600
        background = Image.new("RGB", (width, height), color=(0, 100, 100))
    
    draw = ImageDraw.Draw(background)
    dice_imgs = []
    for path in dice_image_paths:
        if os.path.exists(path):
            try:
                dice_imgs.append(Image.open(path))
            except Exception as e:
                print(f"L·ªói m·ªü ·∫£nh {path}: {e}")
        else:
            print(f"File ·∫£nh kh√¥ng t·ªìn t·∫°i: {path}")

    if len(dice_imgs) != 3:
        print("Kh√¥ng ƒë·ªß ·∫£nh x√∫c x·∫Øc ƒë·ªÉ gh√©p h√¨nh.")
        return None

    dice_w, dice_h = 120, 120
    dice_imgs = [img.resize((dice_w, dice_h)) for img in dice_imgs]

    center_x, center_y = width // 2, (height // 2) - 30
    radius = 60
    angles_deg = [0, 120, 240]
    positions = []
    for angle_deg in angles_deg:
        angle_rad = math.radians(angle_deg)
        x_center = center_x + radius * math.cos(angle_rad)
        y_center = center_y + radius * math.sin(angle_rad)
        x = x_center - dice_w / 2
        y = y_center - dice_h / 2
        positions.append((x, y))

    for i, dice_img in enumerate(dice_imgs):
        new_w, new_h = dice_img.size
        x = positions[i][0] + dice_w / 2 - new_w / 2
        y = positions[i][1] + dice_h / 2 - new_h / 2
        background.paste(dice_img, (int(x), int(y)), dice_img.convert("RGBA"))

    def draw_centered_in_rect(draw_obj, text, font, rect, fill_color="white", shadow=False):
        x1, y1, x2, y2 = rect
        text_w, text_h = font.getbbox(text)[2:]
        rect_w = x2 - x1
        rect_h = y2 - y1
        x_mid = x1 + (rect_w - text_w) // 2
        y_mid = y1 + (rect_h - text_h) // 2
        if shadow:
            draw_obj.text((x_mid + 2, y_mid + 2), text, font=font, fill="black")
        draw_obj.text((x_mid, y_mid), text, font=font, fill=fill_color)

    tai_rect   = (  -70, 350,  300, 190)
    xiu_rect   = ( 680, 350,  950, 190)
    chan_rect  = (  -70, 400,  300, 290)
    le_rect    = ( 680, 400,  950, 290)
    
    result_rect = (460, 470, 740, 550)

    font = FONT_TEXT

    if mode == "individual":
        bet_text = f"{format_money(bet_amount)}"
        choice_lower = choice.lower()
        if choice_lower == "t√†i":
            draw_centered_in_rect(draw, bet_text, font, tai_rect, fill_color="lime", shadow=True)
        elif choice_lower == "x·ªâu":
            draw_centered_in_rect(draw, bet_text, font, xiu_rect, fill_color="lime", shadow=True)
        elif choice_lower == "ch·∫µn":
            draw_centered_in_rect(draw, bet_text, font, chan_rect, fill_color="lime", shadow=True)
        elif choice_lower == "l·∫ª":
            draw_centered_in_rect(draw, bet_text, font, le_rect, fill_color="lime", shadow=True)
    elif mode == "round":
        total_tai_text  = f"{format_money(total_tai)}"  if total_tai  else "0 VNƒê"
        total_xiu_text  = f"{format_money(total_xiu)}"  if total_xiu  else "0 VNƒê"
        total_chan_text = f"{format_money(total_chan)}" if total_chan else "0 VNƒê"
        total_le_text   = f"{format_money(total_le)}"   if total_le   else "0 VNƒê"
        draw_centered_in_rect(draw, total_tai_text,  font, tai_rect,   fill_color="yellow", shadow=True)
        draw_centered_in_rect(draw, total_xiu_text,  font, xiu_rect,   fill_color="yellow", shadow=True)
        draw_centered_in_rect(draw, total_chan_text, font, chan_rect,  fill_color="red", shadow=True)
        draw_centered_in_rect(draw, total_le_text,   font, le_rect,    fill_color="red", shadow=True)
        
    FONT_TEXT_BIG = ImageFont.truetype("modules/cache/fonts/Kanit-Medium.ttf", 40)
    lines_to_draw = [
        f"S·ªë ƒëi·ªÉm: {dice_sum}",
        tai_or_xiu,
        chan_or_le
    ]
    draw_multiline_centered_in_rect(
        draw,
        lines=lines_to_draw,
        font=FONT_TEXT_BIG,
        rect=result_rect,
        fill_color="red",
        shadow=True,
        line_spacing=5
    )    

    background.save(output_path)
    return output_path

# H√†m t·∫°o ƒë·ªì th·ªã th·ªëng k√™ (ƒë·ªì th·ªã d·∫°ng s√≥ng)
def create_bar_chart(history, line_color='red', text_color='yellow'):
    points = [item['sum'] for item in history]
    x = list(range(len(points)))
    fig, ax = plt.subplots(figsize=(6, 4), dpi=120)
    ax.plot(x, points, color=line_color, linewidth=2.5, linestyle='-', 
            marker='o', markersize=6, markerfacecolor='white', markeredgewidth=1.5)
    ax.set_title("ƒê·ªì th·ªã xu h∆∞·ªõng x√∫c x·∫Øc", fontsize=16, color=text_color, pad=15, fontweight='bold')
    ax.set_xlabel("S·ªë l∆∞·ª£t", fontsize=14, color=text_color, labelpad=10)
    ax.set_ylabel("< X·ªâu______T√†i >", fontsize=14, color=text_color, labelpad=10)
    ax.tick_params(axis='x', colors=text_color, labelsize=12)
    ax.tick_params(axis='y', colors=text_color, labelsize=12)
    ax.grid(True, linestyle='--', linewidth=0.8, alpha=0.6)
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    buf = io.BytesIO()
    fig.savefig(buf, format='PNG', bbox_inches='tight', transparent=True)
    plt.close(fig)
    buf.seek(0)
    return Image.open(buf)

# -------------------------------
# H√†m t·∫°o ·∫£nh soi c·∫ßu, v·∫Ω l∆∞·ªõi v√† gh√©p ƒë·ªì th·ªã
def create_soicau_image(history):
    jackpot_data = load_jackpot_data()
    width, height = 1000, 500
    img = Image.new('RGB', (width, height), color=(75, 54, 33))
    draw = ImageDraw.Draw(img)
    for y in range(height):
        gradient = int(75 + (150 - 75) * (y / height))
        draw.line([(0, y), (width, y)], fill=(gradient, gradient-30, gradient-50))
    title_text = "L·ªäCH S·ª¨ PHI√äN HI·ªÜN T·∫†I - SOI C·∫¶U"
    draw.text((12, 12), title_text, font=FONT_TITLE, fill=(0, 0, 0))
    draw.text((10, 10), title_text, font=FONT_TITLE, fill=(255, 215, 0))
    cell_size = 40
    start_x, start_y = 10, 60
    rows, cols = 10, 10
    for r in range(rows + 1):
        y_line = start_y + r * cell_size
        draw.line([(start_x, y_line), (start_x + cols * cell_size, y_line)], fill=(200, 170, 100), width=1)
    for c in range(cols + 1):
        x_line = start_x + c * cell_size
        draw.line([(x_line, start_y), (x_line, start_y + rows * cell_size)], fill=(200, 170, 100), width=1)
    recent_100 = history[-100:]
    for i, item in enumerate(recent_100):
        if i >= rows * cols:
            break
        row, col = divmod(i, cols)
        center_x = start_x + col * cell_size + cell_size // 2
        center_y = start_y + row * cell_size + cell_size // 2
        fill_color = (100, 0, 0) if item['result'] in ['T√†i', 'Ch·∫µn'] else (255, 255, 255)
        draw.ellipse([center_x - 10, center_y - 10, center_x + 10, center_y + 10],
                     fill=fill_color, outline=(255, 215, 0), width=2)
    info_x, info_y = 590, 20
    dot_diameter, dot_margin = 25, 10
    draw.ellipse([info_x, info_y, info_x + dot_diameter, info_y + dot_diameter], fill=(100, 0, 0))
    draw.text((info_x + dot_diameter + dot_margin, info_y),
              f"T√ÄI : {sum(1 for x in history if x['result'] == 'T√†i')}", font=FONT_TEXT, fill=(255, 215, 0))
    draw.ellipse([info_x, info_y + 30, info_x + dot_diameter, info_y + 30 + dot_diameter], fill=(255, 255, 255))
    draw.text((info_x + dot_diameter + dot_margin, info_y + 30),
              f"X·ªàU : {sum(1 for x in history if x['result'] == 'X·ªâu')}", font=FONT_TEXT, fill=(255, 215, 0))
    draw.text((info_x, info_y + 60),  f"T·ªïng l∆∞·ª£t: {len(history)}", font=FONT_TEXT, fill=(255, 215, 0))
    draw.text((info_x, info_y + 90),
              f"H≈©: {jackpot_data.get('pool', 0):,} VNƒê", font=FONT_TEXT, fill=(255, 215, 0))
    draw.text((info_x, info_y + 120),
              f"X√°c su·∫•t n·ªï h≈©: {100 - jackpot_data.get('counter', 100)}%", font=FONT_TEXT, fill=(255, 215, 0))
    chart_img = create_bar_chart(history)
    chart_img = chart_img.resize((580, 280))
    img.paste(chart_img, (width - 590, height - 280), chart_img.convert("RGBA"))
    soicau_image_path = "modules/cache/soicau.png"
    img.save(soicau_image_path)
    return soicau_image_path

# -------------------------------
from PIL import Image, ImageDraw, ImageFont

def create_round_result_image(
    bets,
    dice_values,
    total_points,
    outcome_result,
    even_odd_result,
    money_data,
    jackpot_data,
    client
):
    from PIL import Image, ImageDraw, ImageFont

    # 1) C√°c bi·∫øn c∆° b·∫£n
    num_rows = len(bets)
    margin = 30  # l·ªÅ ngo√†i

    # Kh·ªëi hi·ªÉn th·ªã x√∫c x·∫Øc
    info_block_height = 120

    # T·∫°m ∆∞·ªõc t√≠nh chi·ªÅu cao b·∫£ng (header + row_height * s·ªë d√≤ng)
    # ta s·∫Ω ƒëi·ªÅu ch·ªânh sau khi t√¨m c·ª° font
    header_height = 50
    row_height = 40
    table_height = header_height + num_rows * row_height + 10

    width = 1200  # chi·ªÅu r·ªông c·ªë ƒë·ªãnh

    # -------------------------------------------------
    # T·∫°o s·∫µn 2 d√≤ng jackpot
    # -------------------------------------------------
    jackpot_pool = jackpot_data.get("pool", 0)
    progress = 100 - jackpot_data.get("counter", 100)
    fill_count = int(progress / 10)
    progress_bar = "‚ñà" * fill_count + "‚ñë" * (10 - fill_count)

    jackpot_line1 = f"H≈© hi·ªán t·∫°i: {format_money(jackpot_pool)}"
    jackpot_line2 = f"Ti·∫øn tr√¨nh n·ªï h≈©: [{progress_bar}] {progress}%"

    # -------------------------------------------------
    # 2) T√¨m c·ª° font cho b·∫£ng
    # -------------------------------------------------
    header_texts = ["STT", "T√™n", "C∆∞·ª£c", "S·ªë ti·ªÅn", "K·∫øt qu·∫£", "S·ªë d∆∞ cu·ªëi"]
    table_data = []
    for idx, bet in enumerate(bets, start=1):
        user_id = bet["author_id"]
        username = get_user_name(client, user_id)  # h√†m l·∫•y t√™n user
        bet_choice = bet["choice"].capitalize()
        bet_amount = bet["bet_amount"]

        # X√°c ƒë·ªãnh th·∫Øng/thua (ch·ªó n√†y logic c≈©)
        if bet_choice.lower() in ["t√†i", "x·ªâu"]:
            win = (bet_choice.lower() == outcome_result.lower())
        else:
            win = (bet_choice.lower() == even_odd_result.lower())
        result_text = "Th·∫Øng" if win else "Thua"
        final_balance = money_data.get(str(user_id), 0)

        row_data = [
            str(idx),
            username,
            bet_choice,
            format_money(bet_amount),
            result_text,
            format_money(final_balance)
        ]
        table_data.append(row_data)

    num_cols = len(header_texts)

    def measure_columns_with_font(font, data_rows, headers):
        col_widths = [0] * num_cols
        for i, htext in enumerate(headers):
            w = font.getlength(htext)
            col_widths[i] = max(col_widths[i], w)
        for row in data_rows:
            for i, cell in enumerate(row):
                w = font.getlength(cell)
                if w > col_widths[i]:
                    col_widths[i] = w
        return col_widths

    col_padding = 20
    table_x = margin
    table_w = width - 2 * margin

    font_size_max = 36
    font_size_min = 10
    best_font_size = font_size_min

    # D√≤ font l·ªõn nh·∫•t c√≥ th·ªÉ
    for fs in range(font_size_max, font_size_min - 1, -1):
        temp_font = ImageFont.truetype("modules/cache/fonts/Kanit-Medium.ttf", fs)
        col_widths = measure_columns_with_font(temp_font, table_data, header_texts)
        total_cols_width = sum(col_widths) + num_cols * col_padding
        if total_cols_width <= table_w:
            best_font_size = fs
            break

    # Font table ch√≠nh th·ª©c
    table_font = ImageFont.truetype("modules/cache/fonts/Kanit-Medium.ttf", best_font_size)

    # ƒêo l·∫°i c·ªôt
    col_widths = measure_columns_with_font(table_font, table_data, header_texts)
    header_height = best_font_size + 14
    row_height = best_font_size + 8
    table_height = header_height + num_rows * row_height + 10

    # -------------------------------------------------
    # 3) Font ti√™u ƒë·ªÅ, h√†m v·∫Ω text
    # -------------------------------------------------
    try:
        title_font = FONT_TITLE
    except:
        title_font = ImageFont.truetype("modules/cache/fonts/FrancoisOne-Regular.ttf", 32)

    def get_text_size(font, text):
        bbox = font.getbbox(text)
        return bbox[2] - bbox[0], bbox[3] - bbox[1]

    def draw_centered_text(txt, font, y, fill_color="white", shadow=False):
        w, h = get_text_size(font, txt)
        x = (width - w) // 2
        if shadow:
            draw.text((x+2, y+2), txt, font=font, fill="black")
        draw.text((x, y), txt, font=font, fill=fill_color)
        return h

    # -------------------------------------------------
    # 4) ƒêo chi·ªÅu cao 2 d√≤ng jackpot
    # -------------------------------------------------
    j1_w, j1_h = get_text_size(table_font, jackpot_line1)
    j2_w, j2_h = get_text_size(table_font, jackpot_line2)
    # T·ªïng = chi·ªÅu cao 2 d√≤ng + 5px c√°ch gi·ªØa ch√∫ng
    jackpot_text_height = j1_h + j2_h + 5

    # -------------------------------------------------
    # 5) T√≠nh chi·ªÅu cao ·∫£nh cu·ªëi
    # -------------------------------------------------
    # = margin tr√™n + info_block_height + table_height + jackpot_text_height + 20 px kho·∫£ng ƒë·ªám d∆∞·ªõi + margin d∆∞·ªõi
    #  => +20 px (ho·∫∑c tu·ª≥ b·∫°n) ƒë·ªÉ 2 d√≤ng jackpot kh√¥ng s√°t b·∫£ng
    space_above_jackpot = 20
    margin_bottom = 100
    height = margin + info_block_height + table_height + space_above_jackpot + jackpot_text_height + margin_bottom

    # T·∫°o ·∫£nh
    base = Image.new("RGB", (width, height), (0, 0, 0))
    draw = ImageDraw.Draw(base)

    # -------------------------------------------------
    # 6) V·∫Ω gradient n·ªÅn
    # -------------------------------------------------
    top_color = (50, 80, 150)
    bottom_color = (150, 80, 50)
    for y in range(height):
        blend = y / height
        r = int(top_color[0] * (1 - blend) + bottom_color[0] * blend)
        g = int(top_color[1] * (1 - blend) + bottom_color[1] * blend)
        b = int(top_color[2] * (1 - blend) + bottom_color[2] * blend)
        draw.line([(0, y), (width, y)], fill=(r, g, b))

    # -------------------------------------------------
    # 7) B·∫Øt ƒë·∫ßu v·∫Ω
    # -------------------------------------------------
    y_cursor = margin

    # Ti√™u ƒë·ªÅ
    th = draw_centered_text("K·∫æT QU·∫¢ V√íNG C∆Ø·ª¢C", title_font, y_cursor, fill_color=(255,215,0), shadow=True)
    y_cursor += (th + 10)

    # Th√¥ng tin x√∫c x·∫Øc
    line1 = f"X√∫c x·∫Øc: {dice_values[0]} - {dice_values[1]} - {dice_values[2]}"
    line2 = f"T·ªïng ƒëi·ªÉm: {total_points}"
    line3 = f"K·∫øt qu·∫£: {outcome_result}  |  Ch·∫µn/L·∫ª: {even_odd_result}"

    lh1 = draw_centered_text(line1, table_font, y_cursor)
    y_cursor += lh1 + 5
    lh2 = draw_centered_text(line2, table_font, y_cursor)
    y_cursor += lh2 + 5
    lh3 = draw_centered_text(line3, table_font, y_cursor)
    y_cursor += lh3 + 5

    # B·∫£ng
    table_y = y_cursor + 20
    table_bg = Image.new("RGBA", (table_w, table_height), (255, 255, 255, 50))
    base.paste(table_bg, (table_x, table_y), table_bg)

    draw.rectangle([(table_x, table_y), (table_x + table_w, table_y + table_height)], outline="white", width=2)

    header_y = table_y + 5
    col_x_positions = []
    x_cursor = table_x
    for cw in col_widths:
        col_x_positions.append(x_cursor + col_padding / 2)
        x_cursor += (cw + col_padding)

    # Header
    for i, text_header in enumerate(header_texts):
        draw.text((col_x_positions[i], header_y), text_header, font=table_font, fill=(255, 230, 100))

    sep_y = header_y + header_height - 4
    draw.line([(table_x, sep_y), (table_x + table_w, sep_y)], fill="white", width=2)

    row_y = sep_y + 5
    for row_data in table_data:
        for i, cell_text in enumerate(row_data):
            draw.text((col_x_positions[i], row_y), cell_text, font=table_font, fill="white")
        row_y += row_height

    # -------------------------------------------------
    # 8) V·∫Ω 2 d√≤ng jackpot
    # -------------------------------------------------
    jackpot_y = table_y + table_height + 20  # 20px c√°ch b·∫£ng
    lh_j1 = draw_centered_text(jackpot_line1, table_font, jackpot_y, fill_color="yellow")
    draw_centered_text(jackpot_line2, table_font, jackpot_y + lh_j1 + 5, fill_color="yellow")

    # Vi·ªÅn ngo√†i
    draw.rectangle([(5, 5), (width - 5, height - 5)], outline="white", width=3)

    # -------------------------------------------------
    # 9) L∆∞u ·∫£nh
    # -------------------------------------------------
    result_image_path = "modules/cache/round_result_improved.png"
    base.save(result_image_path)
    return result_image_path

# -------------------------------
# Helper: ch·∫°y h√†m b·∫•t ƒë·ªìng b·ªô tr√™n lu·ªìng ri√™ng
def run_async(func, *args, **kwargs):
    threading.Thread(target=func, args=args, kwargs=kwargs, daemon=True).start()

# -------------------------------
# Global cho ch·∫ø ƒë·ªô ch∆°i theo v√≤ng
current_round = None  # N·∫øu kh√¥ng c√≥ v√≤ng n√†o ƒëang m·ªü th√¨ l√† None

# C·∫•u tr√∫c c·ªßa m·ªôt v√≤ng ch∆°i:
# current_round = {
#   "bets": [ { "author_id": ..., "choice": "t√†i/x·ªâu/ch·∫µn/l·∫ª", "bet_amount": ..., "timestamp": ..., "type": "tx"/"ce" }, ... ],
#   "start_time": ...,
#   "duration": 30,  # gi√¢y
#   "timer": threading.Timer
# }

# -------------------------------
# H√†m h·ªó tr·ª£ chuy·ªÉn ƒë·ªïi s·ªë ti·ªÅn c∆∞·ª£c
def parse_bet_amount(input_str, current_balance):
    if input_str.lower() == "all":
        return current_balance
    elif input_str.endswith('%'):
        try:
            percent = float(input_str[:-1])
            if 1 <= percent <= 100:
                return int(current_balance * (percent / 100))
            else:
                return None
        except ValueError:
            return None
    else:
        try:
            return int(input_str)
        except ValueError:
            return None

# -------------------------------
# H√†m x·ª≠ l√Ω l·ªánh m·ªü v√≤ng ch∆°i T√†i X·ªâu theo v√≤ng
def handle_taixiu_on_command(message, message_object, thread_id, thread_type, author_id, client):
    global current_round
    if current_round is not None:
        client.replyMessage(Message(text="‚ùå V√≤ng ch∆°i ƒë√£ ƒë∆∞·ª£c m·ªü. H√£y ch·ªù v√≤ng hi·ªán t·∫°i k·∫øt th√∫c!"),
                            message_object, thread_id, thread_type, ttl=20000)
        return
    current_round = {
        "bets": [],
        "start_time": time.time(),
        "duration": 45,
        "timer": None
    }
    guide_image_path = "modules/cache/images/taixiuhelp.png"
    if os.path.exists(guide_image_path):
        client.sendLocalImage(
            imagePath=guide_image_path,
            message=Message(text="‚ùó‚ùó‚ùó V√≤ng ch∆°i T√†i X·ªâu ƒë√£ ch√≠nh th·ª©c b·∫Øt ƒë·∫ßu ‚ùó‚ùó‚ùó üî•\n\n‚è± C√°c b·∫°n c√≥ 45 gi√¢y ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c.\n\nüí° H√£y nh·∫≠p l·ªánh: txiu <t√†i/x·ªâu/ch·∫µn/l·∫ª> <s·ªë ti·ªÅn/all/%s·ªë ti·ªÅn> ho·∫∑c k·∫øt h·ª£p c∆∞·ª£c: txiu <t√†i/x·ªâu> <s·ªë ti·ªÅn/all/%s·ªë ti·ªÅn> <ch·∫µn/l·∫ª> <s·ªë ti·ªÅn/all/%s·ªë ti·ªÅn>\n\nüíõüíõüíõ Nh√† c√°i ch·ªët c∆∞·ª£c v√† tung x√∫c x·∫Øc sau 45 gi√¢y n·ªØaüíõüíõüíõ"),
            thread_id=thread_id,
            thread_type=thread_type,
            width=800,
            height=600,
            ttl=30000
        )
    timer = threading.Timer(45, process_round_end, args=(thread_id, thread_type, client))
    current_round["timer"] = timer
    timer.start()

# -------------------------------
# H√†m x·ª≠ l√Ω ƒë·∫∑t c∆∞·ª£c trong v√≤ng (cho c·∫£ l·ªánh ƒë∆°n v√† l·ªánh k·∫øt h·ª£p)
def handle_taixiu_bet_command(message, message_object, thread_id, thread_type, author_id, client):
    global current_round
    if current_round is None:
        handle_taixiu_command(message, message_object, thread_id, thread_type, author_id, client)
        return

    text = message.split()
    if len(text) not in [3, 5]:
        client.replyMessage(
            Message(text="‚ùå C√∫ ph√°p kh√¥ng ƒë√∫ng. S·ª≠ d·ª•ng: txiu <t√†i/x·ªâu/ch·∫µn/l·∫ª> <s·ªë ti·ªÅn/all/%s·ªë ti·ªÅn> ho·∫∑c txiu <t√†i/x·ªâu> <s·ªë ti·ªÅn/all/%s·ªë ti·ªÅn> <ch·∫µn/l·∫ª> <s·ªë ti·ªÅn/all/%s·ªë ti·ªÅn>"),
            message_object, thread_id, thread_type, ttl=20000
        )
        return

    # Ki·ªÉm tra tr√πng l·∫∑p c∆∞·ª£c
    for bet in current_round["bets"]:
        if bet["author_id"] == author_id:
            author_name = get_user_name(client, author_id)
            client.replyMessage(Message(text=f"‚ùå {author_name} b·∫°n ƒë√£ ƒë·∫∑t c∆∞·ª£c trong v√≤ng n√†y."), message_object, thread_id, thread_type, ttl=20000)
            return

    money_data = load_money_data()
    current_balance = money_data.get(str(author_id), 0)
    jackpot_data = load_jackpot_data()

    if len(text) == 5:
        # X·ª≠ l√Ω l·ªánh k·∫øt h·ª£p: txiu <t√†i/x·ªâu> <s·ªë ti·ªÅn/all/%> <ch·∫µn/l·∫ª> <s·ªë ti·ªÅn/all/%>
        choice_tx = text[1].lower()
        bet_tx_input = text[2].lower()
        choice_ce = text[3].lower()
        bet_ce_input = text[4].lower()
        if choice_tx not in ["t√†i", "x·ªâu"] or choice_ce not in ["ch·∫µn", "l·∫ª"]:
            client.replyMessage(Message(text="‚ùå L·ªánh kh√¥ng h·ª£p l·ªá! Ph·∫ßn c∆∞·ª£c ph·∫£i l√†: txiu <t√†i/x·ªâu> <s·ªë ti·ªÅn/all/%> <ch·∫µn/l·∫ª> <s·ªë ti·ªÅn/all/%>"),
                                message_object, thread_id, thread_type, ttl=20000)
            return

        bet_tx = parse_bet_amount(bet_tx_input, current_balance)
        bet_ce = parse_bet_amount(bet_ce_input, current_balance)
        if bet_tx is None or bet_ce is None:
            client.replyMessage(Message(text="‚ùå S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá."),
                                message_object, thread_id, thread_type, ttl=20000)
            return
        total_bet = bet_tx + bet_ce
        if total_bet > current_balance:
            client.replyMessage(Message(text="‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß cho c·∫£ hai c∆∞·ª£c."),
                                message_object, thread_id, thread_type, ttl=20000)
            return

        money_data[str(author_id)] = current_balance - total_bet
        save_money_data(money_data)
        if author_id not in jackpot_data.get("participants", []):
            jackpot_data.setdefault("participants", []).append(author_id)
        save_jackpot_data(jackpot_data)
        current_round["bets"].append({
            "author_id": author_id,
            "choice": choice_tx,
            "bet_amount": bet_tx,
            "timestamp": time.time(),
            "type": "tx"
        })
        current_round["bets"].append({
            "author_id": author_id,
            "choice": choice_ce,
            "bet_amount": bet_ce,
            "timestamp": time.time(),
            "type": "ce"
        })
        # T√≠nh th·ªùi gian c√≤n l·∫°i trong v√≤ng ch∆°i
        remaining_time = int(current_round["start_time"] + current_round["duration"] - time.time())
        
        author_name = get_user_name(client, author_id)
        client.sendMessage(Message(text=f"‚úÖ {author_name} ƒë√£ ƒë·∫∑t c∆∞·ª£c: {format_money(bet_tx)} v√†o {choice_tx.capitalize()} v√† {format_money(bet_ce)} v√†o {choice_ce.capitalize()}\n‚è± C√≤n {remaining_time} gi√¢y n·ªØa nh√† c√°i s·∫Ω ch·ªët c∆∞·ª£c üíõüíõüíõ"),
                           thread_id=thread_id, thread_type=thread_type, ttl=60000)
        return
    else:
        # X·ª≠ l√Ω l·ªánh ƒë∆°n (c≈©)
        if text[1].lower() not in ["t√†i", "x·ªâu", "ch·∫µn", "l·∫ª"]:
            client.replyMessage(Message(text="‚ùå L·ªánh kh√¥ng h·ª£p l·ªá! Ch·ªâ ƒë∆∞·ª£c ch·ªçn: t√†i, x·ªâu, ch·∫µn, ho·∫∑c l·∫ª."),
                                message_object, thread_id, thread_type, ttl=20000)
            return
        choice = text[1].lower()
        if text[2].lower() == "all":
            bet_amount = current_balance
        elif text[2].endswith('%'):
            try:
                percent = float(text[2][:-1])
                if 1 <= percent <= 100:
                    bet_amount = int(current_balance * (percent / 100))
                else:
                    client.replyMessage(Message(text="‚ùå Ph·∫ßn trƒÉm ph·∫£i t·ª´ 1% ƒë·∫øn 100%."),
                                        message_object, thread_id, thread_type, ttl=20000)
                    return
            except ValueError:
                client.replyMessage(Message(text="‚ùå Ph·∫ßn trƒÉm c∆∞·ª£c kh√¥ng h·ª£p l·ªá."),
                                    message_object, thread_id, thread_type, ttl=20000)
                return
        else:
            try:
                bet_amount = int(text[2])
            except ValueError:
                client.replyMessage(Message(text="‚ùå S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá."),
                                    message_object, thread_id, thread_type, ttl=20000)
                return
        if bet_amount <= 0:
            client.replyMessage(Message(text="‚ùå S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0."),
                                message_object, thread_id, thread_type, ttl=20000)
            return
        if bet_amount > current_balance:
            client.replyMessage(Message(text="‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß. Nh·∫≠p 'tx daily' ƒë·ªÉ nh·∫≠n ti·ªÅn mi·ªÖn ph√≠."),
                                message_object, thread_id, thread_type, ttl=20000)
            return
        money_data[str(author_id)] = current_balance - bet_amount
        save_money_data(money_data)
        if author_id not in jackpot_data.get("participants", []):
            jackpot_data.setdefault("participants", []).append(author_id)
        save_jackpot_data(jackpot_data)
        current_round["bets"].append({
            "author_id": author_id,
            "choice": choice,
            "bet_amount": bet_amount,
            "timestamp": time.time(),
            "type": "single"
        })
        remaining_time = int(current_round["start_time"] + current_round["duration"] - time.time())
        # TH√äM CHECK ·ªû ƒê√ÇY:
        if remaining_time <= 0:
            client.replyMessage(Message(text="‚ùå V√≤ng c∆∞·ª£c ƒë√£ k·∫øt th√∫c, kh√¥ng th·ªÉ ƒë·∫∑t c∆∞·ª£c n·ªØa!"),
                                message_object, thread_id, thread_type, ttl=20000)
            return
        author_name = get_user_name(client, author_id)
        client.sendMessage(Message(text=f"‚úÖ {author_name} ƒë√£ ƒë·∫∑t c∆∞·ª£c {format_money(bet_amount)} v√†o {choice.capitalize()}\n‚è± C√≤n {remaining_time} gi√¢y n·ªØa nh√† c√°i s·∫Ω ch·ªët c∆∞·ª£c üíõüíõüíõ"),
                           thread_id=thread_id, thread_type=thread_type, ttl=60000)
        return

# -------------------------------
# H√†m x·ª≠ l√Ω k·∫øt th√∫c v√≤ng c∆∞·ª£c (s·ª≠ d·ª•ng lu·ªìng ri√™ng cho c√°c l·ªánh sleep)
def process_round_end(thread_id, thread_type, client):
    global current_round
    if current_round is None:
        return
    bets = current_round["bets"]
    if not bets:
        client.sendMessage(Message(text="‚ùå‚ùå‚ùå V√≤ng c∆∞·ª£c k·∫øt th√∫c, nh∆∞ng kh√¥ng c√≥ ai ƒë·∫∑t c∆∞·ª£c ‚ùå‚ùå‚ùå"),
                           thread_id=thread_id, thread_type=thread_type, ttl=20000)
        current_round = None
        return
        
    total_tai = sum(bet["bet_amount"] for bet in bets if bet["choice"].lower() == "t√†i")
    total_xiu = sum(bet["bet_amount"] for bet in bets if bet["choice"].lower() == "x·ªâu")
    total_chan = sum(bet["bet_amount"] for bet in bets if bet["choice"].lower() == "ch·∫µn")
    total_le = sum(bet["bet_amount"] for bet in bets if bet["choice"].lower() == "l·∫ª")
    
    dice_values = [random.randint(1, 6) for _ in range(3)]
    total_points = sum(dice_values)
    
    dice_sum = total_points
    tai_or_xiu = "T√†i" if dice_sum >= 11 else "X·ªâu"
    chan_or_le = "Ch·∫µn" if dice_sum % 2 == 0 else "L·∫ª"
    
    client.sendMessage(Message(text="‚ùó‚ùó‚ùó H·∫øt gi·ªù .... ‚ùó‚ùó‚ùó Th·∫£ tay ra ...."),
                       thread_id=thread_id, thread_type=thread_type, ttl=8000)
    
    if 11 <= total_points <= 18:
        outcome_result = "T√†i"
    else:
        outcome_result = "X·ªâu"
    even_odd_result = "Ch·∫µn" if total_points % 2 == 0 else "L·∫ª"
        
    current_history = load_current_soicau_data()
    current_history.append({
        "dice": dice_values,
        "sum": total_points,
        "result": outcome_result
    })
    if len(current_history) >= 100:
        save_old_soicau_data(current_history)
        current_history = []
    save_current_soicau_data(current_history)
    
    jackpot_data = load_jackpot_data()
    money_data = load_money_data()
    results_lines = [f"üé≤ K·∫øt qu·∫£ v√≤ng c∆∞·ª£c:"]
    results_lines.append(f"X√∫c x·∫Øc: {dice_values[0]} - {dice_values[1]} - {dice_values[2]}")
    results_lines.append(f"T·ªïng ƒëi·ªÉm: {total_points}")
    results_lines.append(f"K·∫øt qu·∫£: {outcome_result} (Ch·∫µn/L·∫ª: {even_odd_result})")
    results_lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    for bet in bets:
        user_id = bet["author_id"]
        choice = bet["choice"]
        bet_amount = bet["bet_amount"]
        username = get_user_name(client, user_id)
        if choice in ["t√†i", "x·ªâu"]:
            win = (choice == outcome_result.lower())
        else:
            win = (choice == even_odd_result.lower())
        if win:
            winnings = bet_amount * 5
            jackpot_contribution = int(winnings * 0.05)
            net_win = winnings - jackpot_contribution
            money_data[str(user_id)] += net_win
            jackpot_data["pool"] += jackpot_contribution
            result_text = f"‚úÖ {username} th·∫Øng {format_money(net_win)} (ƒë√≥ng g√≥p {format_money(jackpot_contribution)} v√†o H≈©)"
        else:
            net_win = -bet_amount
            result_text = f"‚õî {username} thua {format_money(bet_amount)}"
        history_data = load_history_data()
        user_history = history_data.get(username, [])
        record = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()),
            "bet": bet_amount,
            "choice": choice,
            "dice": dice_values,
            "total_points": total_points,
            "result": outcome_result,
            "outcome": "Th·∫Øng" if win else "Thua",
            "net_change": net_win,
            "balance": money_data.get(str(user_id), 0)
        }
        user_history.append(record)
        history_data[username] = user_history
        save_history_data(history_data)
        results_lines.append(result_text)
    save_money_data(money_data)
    save_jackpot_data(jackpot_data)
    
    result_image_path = create_round_result_image(bets, dice_values, total_points, outcome_result, even_odd_result, money_data, jackpot_data, client)
    
    def delayed_round_display():
        time.sleep(3)
        gif_path = "modules/cache/gif/giftxvipp.gif"
        client.sendLocalGif(
            gifPath=gif_path,
            thumbnailUrl=None,
            thread_id=thread_id,
            thread_type=thread_type,
            width=1000,
            height=600,
            ttl=6000
        )
        time.sleep(8)
        image_paths = [f'modules/cache/datatx/{value}.png' for value in dice_values]
        merged_image_path = "modules/cache/datatx/merged_dice.png"
        if all(os.path.exists(path) for path in image_paths):
            merge_dice_images_triangle(
                image_paths, 0, "", merged_image_path, 
                mode="round", total_tai=total_tai, total_xiu=total_xiu, 
                total_chan=total_chan, total_le=total_le, dice_sum=dice_sum,
                tai_or_xiu=tai_or_xiu,
                chan_or_le=chan_or_le
            )
            client.sendLocalImage(
                imagePath=merged_image_path,
                message="",
                thread_id=thread_id,
                thread_type=thread_type,
                width=1000,
                height=600,
                ttl=60000
            )
            try:
                os.remove(merged_image_path)
            except Exception as e:
                print(f"L·ªói x√≥a file ·∫£nh {merged_image_path}: {e}")
        else:
            client.sendMessage(Message(text="\n‚ùå Kh√¥ng th·ªÉ hi·ªÉn th·ªã h√¨nh ·∫£nh k·∫øt qu·∫£ do thi·∫øu h√¨nh ·∫£nh x√∫c x·∫Øc."), thread_id=thread_id, thread_type=thread_type, ttl=20000)
        time.sleep(2)
        if result_image_path and os.path.exists(result_image_path):
            # M·ªü ·∫£nh v·ª´a t·∫°o ra
            merged_image = Image.open(result_image_path)
            img_width, img_height = merged_image.size  # L·∫•y ƒë√∫ng k√≠ch th∆∞·ªõc ·∫£nh th·ª±c t·∫ø

            print(f"K√≠ch th∆∞·ªõc ·∫£nh th·ª±c t·∫ø: {img_width} x {img_height}")  # Ki·ªÉm tra log

            # G·ª≠i ·∫£nh v·ªõi k√≠ch th∆∞·ªõc ch√≠nh x√°c
            client.sendLocalImage(
                imagePath=result_image_path,
                message=Message(text="üìä K·∫øt qu·∫£ v√≤ng c∆∞·ª£c chi ti·∫øt:"),
                thread_id=thread_id,
                thread_type=thread_type,
                width=img_width,  # D√πng k√≠ch th∆∞·ªõc ·∫£nh th·∫≠t
                height=img_height,  # D√πng k√≠ch th∆∞·ªõc ·∫£nh th·∫≠t
                ttl=60000
            )
            try:
                os.remove(result_image_path)
            except Exception as e:
                print(f"L·ªói x√≥a file {result_image_path}: {e}")
    run_async(delayed_round_display)
    
    decrement = random.randint(5, 10)
    jackpot_data["counter"] -= decrement
    print(f"Sau v√≤ng, counter gi·∫£m ƒëi {decrement} v√† hi·ªán t·∫°i counter = {jackpot_data['counter']}")
    if jackpot_data["counter"] <= 0:
        if jackpot_data.get("participants"):
            winner_id = random.choice(jackpot_data["participants"])
            money_data[str(winner_id)] += jackpot_data["pool"]
            save_money_data(money_data)
            info_response = client.fetchUserInfo(winner_id)
            profiles = info_response.unchanged_profiles or info_response.changed_profiles
            winner_name = profiles.get(winner_id, {}).get("zaloName", "Kh√¥ng x√°c ƒë·ªãnh")
            jackpot_message = (
                f"üéâ CH√öC M·ª™NG {winner_name} ƒê√É N·ªî H≈® üéâ\n"
                f"üí∞ B·∫°n nh·∫≠n ƒë∆∞·ª£c {format_money(jackpot_data['pool'])} t·ª´ H≈© may m·∫Øn!"
            )
            client.sendMessage(Message(text=jackpot_message), thread_id=thread_id, thread_type=thread_type, ttl=180000)
        jackpot_data["pool"] = 0
        jackpot_data["counter"] = 100
        jackpot_data["participants"] = []
    save_jackpot_data(jackpot_data)
    
    current_round = None

# -------------------------------
# H√†m x·ª≠ l√Ω l·ªánh ch∆°i T√†i X·ªâu ki·ªÉu "ngay l·∫≠p t·ª©c"
def handle_taixiu_command(message, message_object, thread_id, thread_type, author_id, client):
    global current_round
    if current_round is not None:
        handle_taixiu_bet_command(message, message_object, thread_id, thread_type, author_id, client)
        return

    client.sendReaction(message_object, "‚úÖ", thread_id, thread_type, reactionType=75)
    text = message.split()
    money_data = load_money_data()
    jackpot_data = load_jackpot_data()
    response_message = ""
    
    if len(text) not in [3, 5]:
        guide_image_path = "modules/cache/images/taixiuhelp.png"
        if os.path.exists(guide_image_path):
            client.sendLocalImage(
                imagePath=guide_image_path,
                message=Message(text=(
    "üåü H∆Ø·ªöNG D·∫™N CH∆†I T√ÄI X·ªàU üé≤\n"
    "  ‚Ä¢ Kh√¥ng c·∫ßn ƒëƒÉng k√≠ t√†i kho·∫£n\n"
    "  ‚Ä¢ G√µ tx daily nh·∫≠n ti·ªÅn ch∆°i\n"
    "  ‚Ä¢ G√µ on ƒë·ªÉ m·ªü ch·∫ø ƒë·ªô ch∆°i nhi·ªÅu ng∆∞·ªùi\n"
    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    "üìú LU·∫¨T CH∆†I:\n"
    "  ‚Ä¢ H·ªá th·ªëng s·∫Ω tung 3 vi√™n x√∫c x·∫Øc trong m·ªói v√°n.\n"
    "  ‚Ä¢ T·ªïng ƒëi·ªÉm quy·∫øt ƒë·ªãnh k·∫øt qu·∫£:\n"
    "    - 3-10 ƒëi·ªÉm ‚Üí ‚ùé X·ªâu\n"
    "    - 11-18 ƒëi·ªÉm ‚Üí ‚úÖ T√†i\n"
    "  ‚Ä¢ Ph√¢n lo·∫°i Ch·∫µn/L·∫ª:\n"
    "    - T·ªïng ƒëi·ªÉm chia h·∫øt cho 2 ‚Üí ‚úÖ Ch·∫µn\n"
    "    - T·ªïng ƒëi·ªÉm kh√¥ng chia h·∫øt cho 2 ‚Üí ‚ùé L·∫ª\n"
    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    "üí∞ C∆Ø·ª¢C:\n"
    "  ‚Ä¢ C∆∞·ª£c ƒë∆°n:\n"
    "    - C√∫ ph√°p: txiu <t√†i/x·ªâu/ch·∫µn/l·∫ª> <s·ªë ti·ªÅn/all/%s·ªë ti·ªÅn>\n"
    "    - V√≠ d·ª•: txiu t√†i 10000 | txiu l·∫ª all | txiu x·ªâu 50%\n"
    "    - B·∫°n ch·ªâ ƒë∆∞·ª£c ƒë·∫∑t m·ªôt lo·∫°i c∆∞·ª£c duy nh·∫•t (T√†i, X·ªâu, Ch·∫µn ho·∫∑c L·∫ª).\n"
    "  ‚Ä¢ C∆∞·ª£c k·∫øt h·ª£p:\n"
    "    - C√∫ ph√°p: txiu <t√†i/x·ªâu> <s·ªë ti·ªÅn/all/%s·ªë ti·ªÅn> <ch·∫µn/l·∫ª> <s·ªë ti·ªÅn/all/%s·ªë ti·ªÅn>\n"
    "    - V√≠ d·ª•: txiu t√†i 10000 ch·∫µn 5000\n"
    "    - ƒê·∫∑t c∆∞·ª£c c√πng l√∫c c·∫£ T√†i/X·ªâu v√† Ch·∫µn/L·∫ª.\n"
    "    - S·ªë d∆∞ ph·∫£i ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán c·∫£ hai c∆∞·ª£c.\n"
    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    "üìä L·ªÜNH KH√ÅC:\n"
    "  ‚Ä¢ soi: Xem th√¥ng tin soi c·∫ßu c·ªßa phi√™n hi·ªán t·∫°i.\n"
    "  ‚Ä¢ xemphientruoc: Xem k·∫øt qu·∫£ c·ªßa 100 v√°n ch∆°i tr∆∞·ªõc ƒë√≥.\n"
    "  ‚Ä¢ lichsu: Xem l·ªãch s·ª≠ chi·∫øn t√≠ch c·ªßa b·∫°n.\n"
    "  ‚Ä¢ dudoan: Xem d·ª± ƒëo√°n k·∫øt qu·∫£ k·∫ø ti·∫øp\n"
)),
                thread_id=thread_id,
                thread_type=thread_type,
                width=1000,
                height=600,
                ttl=60000
            )
        return

    # N·∫øu nh·∫≠p l·ªánh k·∫øt h·ª£p (5 ph·∫ßn)
    if len(text) == 5:
        choice_tx = text[1].lower()
        bet_tx_input = text[2].lower()
        choice_ce = text[3].lower()
        bet_ce_input = text[4].lower()
        if choice_tx not in ["t√†i", "x·ªâu"] or choice_ce not in ["ch·∫µn", "l·∫ª"]:
            client.replyMessage(Message(text="‚ùå L·ªánh kh√¥ng h·ª£p l·ªá! Ph·∫ßn c∆∞·ª£c ph·∫£i l√†: txiu <t√†i/x·ªâu> <s·ªë ti·ªÅn/all/%> <ch·∫µn/l·∫ª> <s·ªë ti·ªÅn/all/%>"),
                                message_object, thread_id, thread_type, ttl=20000)
            return
        current_balance = money_data.get(str(author_id), 0)
        bet_tx = parse_bet_amount(bet_tx_input, current_balance)
        bet_ce = parse_bet_amount(bet_ce_input, current_balance)
        if bet_tx is None or bet_ce is None:
            client.replyMessage(Message(text="‚ùå S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá."),
                                message_object, thread_id, thread_type, ttl=20000)
            return
        total_bet = bet_tx + bet_ce
        if total_bet > current_balance:
            client.replyMessage(Message(text="‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß cho c·∫£ hai c∆∞·ª£c."),
                                message_object, thread_id, thread_type, ttl=20000)
            return
        money_data[str(author_id)] = current_balance - total_bet
        save_money_data(money_data)
        if author_id not in jackpot_data.get("participants", []):
            jackpot_data.setdefault("participants", []).append(author_id)
        save_jackpot_data(jackpot_data)
        dice_values = [random.randint(1, 6) for _ in range(3)]
        total_points = sum(dice_values)
        result_tx = "t√†i" if total_points >= 11 else "x·ªâu"
        result_ce = "ch·∫µn" if total_points % 2 == 0 else "l·∫ª"
        current_history = load_current_soicau_data()
        current_history.append({
            "dice": dice_values,
            "sum": total_points,
            # Ch·ªâ l∆∞u "T√†i" ho·∫∑c "X·ªâu" v√†o tr∆∞·ªùng "result"
            "result": result_tx.capitalize()  # Ho·∫∑c tai_or_xiu.capitalize()
        })
        save_current_soicau_data(current_history)

        win_tx = (choice_tx == result_tx)
        win_ce = (choice_ce == result_ce)
        result_lines = []
        net_change_total = 0
        if win_tx:
            winnings = bet_tx * 5
            jackpot_contribution = int(winnings * 0.05)
            net_win = winnings - jackpot_contribution
            money_data[str(author_id)] += net_win
            result_lines.append(f"‚úÖ {choice_tx.capitalize()} th·∫Øng: +{format_money(net_win)} (ƒë√≥ng g√≥p {format_money(jackpot_contribution)} cho H≈©)")
            net_change_tx = net_win
            jackpot_data["pool"] += jackpot_contribution
        else:
            result_lines.append(f"‚õî {choice_tx.capitalize()} thua: -{format_money(bet_tx)}")
            net_change_tx = -bet_tx
        if win_ce:
            winnings = bet_ce * 5
            jackpot_contribution = int(winnings * 0.05)
            net_win = winnings - jackpot_contribution
            money_data[str(author_id)] += net_win
            result_lines.append(f"‚úÖ {choice_ce.capitalize()} th·∫Øng: +{format_money(net_win)} (ƒë√≥ng g√≥p {format_money(jackpot_contribution)} cho H≈©)")
            net_change_ce = net_win
            jackpot_data["pool"] += jackpot_contribution
        else:
            result_lines.append(f"‚õî {choice_ce.capitalize()} thua: -{format_money(bet_ce)}")
            net_change_ce = -bet_ce
        net_change_total = net_change_tx + net_change_ce
        save_money_data(money_data)
        save_jackpot_data(jackpot_data)
        # Th√¥ng b√°o ƒë·∫∑t c∆∞·ª£c th√†nh c√¥ng
        author_name = get_user_name(client, author_id)
        client.sendMessage(
            Message(text=f"‚úÖ {author_name}, b·∫°n ƒë√£ ƒë·∫∑t c∆∞·ª£c th√†nh c√¥ng {format_money(bet_tx)} v√†o {choice_tx.capitalize()} v√† {format_money(bet_ce)} v√†o {choice_ce.capitalize()}"),
            thread_id=thread_id,
            thread_type=thread_type,
            ttl=30000
        )

        history_data = load_history_data()
        username = get_user_name(client, author_id)
        record_tx = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()),
            "bet": bet_tx,
            "choice": choice_tx,
            "dice": dice_values,
            "total_points": total_points,
            "result": result_tx.capitalize(),
            "outcome": "Th·∫Øng" if win_tx else "Thua",
            "net_change": net_change_tx,
            "balance": money_data.get(str(author_id), 0)
        }
        record_ce = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()),
            "bet": bet_ce,
            "choice": choice_ce,
            "dice": dice_values,
            "total_points": total_points,
            "result": result_ce.capitalize(),
            "outcome": "Th·∫Øng" if win_ce else "Thua",
            "net_change": net_change_ce,
            "balance": money_data.get(str(author_id), 0)
        }
        user_history = history_data.get(username, [])
        user_history.append(record_tx)
        user_history.append(record_ce)
        history_data[username] = user_history
        save_history_data(history_data)
        author_name = get_user_name(client, author_id)
        mention = Mention(author_id, length=len(author_name), offset=0)
        balance = money_data.get(str(author_id), 0)
        if balance < 100_000:
            rank_title = "üå± Tay tr·∫Øng"
        elif balance < 1_000_000:
            rank_title = "üÜï Ng∆∞·ªùi m·ªõi v√†o ngh·ªÅ"
        elif balance < 10_000_000:
            rank_title = "üî∞ T·∫≠p s·ª± T√†i X·ªâu"
        elif balance < 50_000_000:
            rank_title = "üìà Con b·∫°c ti·ªÅm nƒÉng"
        elif balance < 100_000_000:
            rank_title = "üíº D√¢n ch∆°i c√≥ s·ªë m√°"
        elif balance < 500_000_000:
            rank_title = "üí∞ Cao th·ªß T√†i X·ªâu"
        elif balance < 1_000_000_000:
            rank_title = "üèÜ ƒê·∫°i gia khu v·ª±c"
        elif balance < 10_000_000_000:
            rank_title = "üíé Tri·ªáu ph√∫ T√†i X·ªâu"
        elif balance < 50_000_000_000:
            rank_title = "üî• Huy·ªÅn tho·∫°i ƒë·ªè ƒëen"
        elif balance < 100_000_000_000:
            rank_title = "üëë Th√°nh nh√¢n c·ªù b·∫°c"
        else:
            rank_title = "üíé Vua T√†i X·ªâu"
        progress = int((100 - jackpot_data["counter"]) / 10)
        progress_bar = "‚ñà" * progress + "‚ñë" * (10 - progress)
        response_message = (
            f"{author_name}\n"
            f"üèÜ Danh hi·ªáu: {rank_title}\n"
            f"üé∞ H≈© may m·∫Øn: {format_money(jackpot_data['pool'])}\n"
            f"üìà Ti·∫øn tr√¨nh n·ªï h≈©: [{progress_bar}] {100 - jackpot_data['counter']}%\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üé≤ X√∫c x·∫Øc: {dice_values[0]} - {dice_values[1]} - {dice_values[2]}\n"
            f"üî¢ T·ªïng ƒëi·ªÉm: {total_points}\n"
            f"‚úÖ K·∫øt qu·∫£ T√†i/X·ªâu: {result_tx.capitalize()}\n"
            f"‚úÖ K·∫øt qu·∫£ Ch·∫µn/L·∫ª: {result_ce.capitalize()}\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n" +
            "\n".join(result_lines) +
            f"\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üí∏ Bi·∫øn ƒë·ªông s·ªë d∆∞: {'+' if net_change_total >= 0 else ''}{format_money(net_change_total)}\n"
            f"üí∞ S·ªë d∆∞ hi·ªán t·∫°i: {format_money(money_data.get(str(author_id), 0))}"
        )
        gif_path = "modules/cache/gif/giftxvipp.gif"
        run_async(client.sendLocalGif,
                  gifPath=gif_path,
                  thumbnailUrl=None,
                  thread_id=thread_id,
                  thread_type=thread_type,
                  width=1000,
                  height=600,
                  ttl=6000)
        def delayed_send_image():
            time.sleep(8)
            image_paths = [f'modules/cache/datatx/{dice_values[0]}.png',
                           f'modules/cache/datatx/{dice_values[1]}.png',
                           f'modules/cache/datatx/{dice_values[2]}.png']
            merged_image_path = "modules/cache/datatx/merged_dice.png"
            if all(os.path.exists(path) for path in image_paths):
                merge_dice_images_triangle(image_paths, 0, "", merged_image_path, mode="individual", dice_sum=total_points,
                    tai_or_xiu=result_tx.capitalize(),
                    chan_or_le=result_ce.capitalize())
                client.sendLocalImage(
                    imagePath=merged_image_path,
                    message=Message(text=response_message),
                    thread_id=thread_id,
                    thread_type=thread_type,
                    width=1000,
                    height=600,
                    ttl=60000
                )
                try:
                    os.remove(merged_image_path)
                except Exception as e:
                    print(f"L·ªói x√≥a file {merged_image_path}: {e}")
            else:
                client.replyMessage(Message(text="\n‚ùå Kh√¥ng th·ªÉ hi·ªÉn th·ªã h√¨nh ·∫£nh k·∫øt qu·∫£ do thi·∫øu h√¨nh ·∫£nh x√∫c x·∫Øc."),
                                    message_object, thread_id, thread_type, ttl=20000)
        run_async(delayed_send_image)
        return
    else:
        # X·ª≠ l√Ω l·ªánh ƒë∆°n
        if text[1].lower() not in ["t√†i", "x·ªâu", "ch·∫µn", "l·∫ª"]:
            response_message = (
                "‚ùå L·ªánh kh√¥ng h·ª£p l·ªá !\n"
                "Ch·ªâ ƒë∆∞·ª£c ch·ªçn: t√†i, x·ªâu, ch·∫µn, ho·∫∑c l·∫ª\n"
                "‚Üí V√≠ d·ª•: txiu t√†i 10000 ho·∫∑c txiu l·∫ª 5000"
            )
            client.replyMessage(Message(text=response_message), message_object, thread_id, thread_type, ttl=20000)
            return
        choice = text[1].lower()
        current_balance = money_data.get(str(author_id), 0)
        if text[2].lower() == "all":
            bet_amount = current_balance
        elif text[2].endswith('%'):
            try:
                percent = float(text[2][:-1])
                if 1 <= percent <= 100:
                    bet_amount = int(current_balance * (percent / 100))
                else:
                    response_message = "‚ùå Ph·∫ßn trƒÉm ph·∫£i t·ª´ 1% ƒë·∫øn 100%."
                    bet_amount = 0
            except ValueError:
                response_message = "‚ùå Ph·∫ßn trƒÉm c∆∞·ª£c kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i (v√≠ d·ª•: 50%)"
                bet_amount = 0
        else:
            try:
                bet_amount = int(text[2])
            except ValueError:
                response_message = "‚ùå S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá. Kh√¥ng nh·∫≠p d·∫•u ph·∫©y ( , )"
                bet_amount = 0
        if bet_amount > current_balance:
            response_message = (
                "‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c.\n"
                "‚Üí Vui l√≤ng nh·∫≠p 'tx daily' ƒë·ªÉ nh·∫≠n ti·ªÅn mi·ªÖn ph√≠."
            )
            client.replyMessage(Message(text=response_message), message_object, thread_id, thread_type, ttl=20000)
            return
        elif bet_amount <= 0:
            response_message = (
                "‚ùå S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0.\n"
                "‚Üí Ki·ªÉm tra l·∫°i s·ªë d∆∞ v√† s·ªë ti·ªÅn b·∫°n nh·∫≠p.\n"
                "‚Üí Nh·∫≠p tx daily ƒë·ªÉ nh·∫≠n ti·ªÅn mi·ªÖn ph√≠."
            )
            client.replyMessage(Message(text=response_message), message_object, thread_id, thread_type, ttl=20000)
            return
        money_data[str(author_id)] = current_balance - bet_amount
        if author_id not in jackpot_data.get("participants", []):
            jackpot_data.setdefault("participants", []).append(author_id)
        author_name = get_user_name(client, author_id)
        client.sendMessage(
            Message(text=f"‚úÖ {author_name}, b·∫°n ƒë√£ ƒë·∫∑t c∆∞·ª£c th√†nh c√¥ng {format_money(bet_amount)} v√†o {choice.capitalize()}."),
            thread_id=thread_id,
            thread_type=thread_type,
            ttl=10000
        )
        dice_values = [random.randint(1, 6) for _ in range(3)]
        total_points = sum(dice_values)
        dice_sum = total_points
        tai_or_xiu = "T√†i" if dice_sum >= 11 else "X·ªâu"
        chan_or_le = "Ch·∫µn" if dice_sum % 2 == 0 else "L·∫ª"
        if choice in ["t√†i", "x·ªâu"]:
            result = "X·ªâu" if 3 <= total_points <= 10 else "T√†i"
        else:
            result = "Ch·∫µn" if total_points % 2 == 0 else "L·∫ª"
        result_tx = "t√†i" if total_points >= 11 else "x·ªâu"    
        win_condition = (choice == result.lower())
        outcome = "‚úÖ B·∫°n ƒë√£ th·∫Øng" if win_condition else "‚õî B·∫°n ƒë√£ thua"
        current_history = load_current_soicau_data()
        # Sau khi s·ª≠a:
        current_history.append({
            "dice": dice_values,
            "sum": total_points,
            "result": result,  # S·ª≠ d·ª•ng bi·∫øn result ƒë√£ x√°c ƒë·ªãnh ·ªü tr√™n
            "result_tx": result_tx  # N·∫øu c·∫ßn, gi·ªØ nguy√™n n·∫øu c√≥ d√πng ƒë·∫øn
        })

        if len(current_history) >= 100:
            save_old_soicau_data(current_history)
            current_history = []
        save_current_soicau_data(current_history)
        jackpot_contribution = 0
        if win_condition:
            winnings = bet_amount * 5
            jackpot_contribution = int(winnings * 0.05)
            net_win = winnings - jackpot_contribution
            money_data[str(author_id)] += net_win
            response = f"‚úÖ ƒê√£ c·ªông {format_money(net_win)} v√†o s·ªë d∆∞ \n‚úÖ ƒê√≥ng g√≥p {format_money(jackpot_contribution)} cho H≈©"
            jackpot_data["pool"] += jackpot_contribution
        else:
            response = f"üö´ ƒê√£ tr·ª´ {format_money(bet_amount)} kh·ªèi s·ªë d∆∞"
        save_money_data(money_data)
        save_jackpot_data(jackpot_data)
        username = get_user_name(client, author_id)
        history_data = load_history_data()
        user_history = history_data.get(username, [])
        record = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()),
            "bet": bet_amount,
            "choice": choice,
            "dice": dice_values,
            "total_points": total_points,
            "result": result,
            "outcome": outcome,
            "net_change": net_win if win_condition else -bet_amount,
            "balance": money_data.get(str(author_id), 0)
        }
        user_history.append(record)
        history_data[username] = user_history
        save_history_data(history_data)
        print("Jackpot data: pool =", jackpot_data["pool"],
              ", counter =", jackpot_data["counter"],
              ", participants =", jackpot_data["participants"])
        author_name = get_user_name(client, author_id)
        mention = Mention(author_id, length=len(author_name), offset=0)
        balance = money_data.get(str(author_id), 0)
        if balance < 100_000:
            rank_title = "üå± Tay tr·∫Øng"
        elif balance < 1_000_000:
            rank_title = "üÜï Ng∆∞·ªùi m·ªõi v√†o ngh·ªÅ"
        elif balance < 10_000_000:
            rank_title = "üî∞ T·∫≠p s·ª± T√†i X·ªâu"
        elif balance < 50_000_000:
            rank_title = "üìà Con b·∫°c ti·ªÅm nƒÉng"
        elif balance < 100_000_000:
            rank_title = "üíº D√¢n ch∆°i c√≥ s·ªë m√°"
        elif balance < 500_000_000:
            rank_title = "üí∞ Cao th·ªß T√†i X·ªâu"
        elif balance < 1_000_000_000:
            rank_title = "üèÜ ƒê·∫°i gia khu v·ª±c"
        elif balance < 10_000_000_000:
            rank_title = "üíé Tri·ªáu ph√∫ T√†i X·ªâu"
        elif balance < 50_000_000_000:
            rank_title = "üî• Huy·ªÅn tho·∫°i ƒë·ªè ƒëen"
        elif balance < 100_000_000_000:
            rank_title = "üëë Th√°nh nh√¢n c·ªù b·∫°c"
        else:
            rank_title = "üíé Vua T√†i X·ªâu"
        progress = int((100 - jackpot_data["counter"]) / 10)
        progress_bar = "‚ñà" * progress + "‚ñë" * (10 - progress)
        data_trave = (
            f"{author_name}\n"
            f"üèÜ Danh hi·ªáu: {rank_title}\n"
            f"üé∞ H≈© may m·∫Øn: {format_money(jackpot_data['pool'])}\n"
            f"üìà Ti·∫øn tr√¨nh n·ªï h≈©: [{progress_bar}] {100 - jackpot_data['counter']}%\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üí∏ B·∫°n ƒë√£ ƒë·∫∑t c∆∞·ª£c: {format_money(bet_amount)} v√†o {choice.capitalize()}\n"
            f"üé≤ Khui: {dice_values[0]} - {dice_values[1]} - {dice_values[2]}\n"
            f"üî¢ T·ªïng ƒëi·ªÉm: {total_points} ({result})\n"                
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"               
            f"{outcome}\n"
            f"{response}\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"            
            f"üí∞ S·ªë d∆∞ hi·ªán t·∫°i:\n"
            f"üíµ {format_money(money_data.get(str(author_id), 0))}\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        )
        gui = Message(
            text=data_trave,
            style=MultiMsgStyle([
                MessageStyle(offset=0, length=len(data_trave), style="font", size=12, auto_format=False, color="blue"),
                MessageStyle(offset=0, length=len(data_trave), style="italic", auto_format=False, color="green")
            ]),
            mention=mention
        )
        gif_path = "modules/cache/gif/giftxvipp.gif"
        run_async(client.sendLocalGif,
                  gifPath=gif_path,
                  thumbnailUrl=None,
                  thread_id=thread_id,
                  thread_type=thread_type,
                  width=1000,
                  height=600,
                  ttl=6000)
        def delayed_send_image():
            time.sleep(8)
            image_paths = [f'modules/cache/datatx/{dice_values[0]}.png',
                           f'modules/cache/datatx/{dice_values[1]}.png',
                           f'modules/cache/datatx/{dice_values[2]}.png']
            merged_image_path = "modules/cache/datatx/merged_dice.png"
            if all(os.path.exists(path) for path in image_paths):
                merge_dice_images_triangle(image_paths, bet_amount, choice, merged_image_path, mode="individual", dice_sum=dice_sum,
                    tai_or_xiu=tai_or_xiu,
                    chan_or_le=chan_or_le)
                client.sendLocalImage(
                    imagePath=merged_image_path,
                    message=gui,
                    thread_id=thread_id,
                    thread_type=thread_type,
                    width=1000,
                    height=600,
                    ttl=60000
                )
                try:
                    os.remove(merged_image_path)
                except Exception as e:
                    print(f"L·ªói x√≥a file {merged_image_path}: {e}")
            else:
                client.replyMessage(Message(text="\n‚ùå Kh√¥ng th·ªÉ hi·ªÉn th·ªã h√¨nh ·∫£nh k·∫øt qu·∫£ do thi·∫øu h√¨nh ·∫£nh x√∫c x·∫Øc."),
                                    message_object, thread_id, thread_type, ttl=20000)
        run_async(delayed_send_image)
        decrement = random.randint(5, 10)
        jackpot_data["counter"] -= decrement
        print(f"Sau l∆∞·ª£t ch∆°i, counter gi·∫£m ƒëi {decrement} v√† hi·ªán t·∫°i counter =", jackpot_data["counter"])
        save_jackpot_data(jackpot_data)
        if jackpot_data["counter"] <= 0:
            if jackpot_data.get("participants"):
                winner_id = random.choice(jackpot_data["participants"])
                money_data[str(winner_id)] += jackpot_data["pool"]
                save_money_data(money_data)
                info_response = client.fetchUserInfo(winner_id)
                profiles = info_response.unchanged_profiles or info_response.changed_profiles
                winner_name = profiles.get(winner_id, {}).get("zaloName", "Kh√¥ng x√°c ƒë·ªãnh")
                jackpot_message = (
                    f"üéâ CH√öC M·ª™NG {winner_name} ƒê√É N·ªî H≈® üéâ\n"
                    f"üí∞ B·∫°n nh·∫≠n ƒë∆∞·ª£c {format_money(jackpot_data['pool'])} t·ª´ H≈© may m·∫Øn!"
                )
                client.sendMessage(Message(text=jackpot_message), thread_id=thread_id, thread_type=thread_type, ttl=180000)
            jackpot_data["pool"] = 0
            jackpot_data["counter"] = 100
            jackpot_data["participants"] = []
            save_jackpot_data(jackpot_data)
        if response_message:
            client.replyMessage(Message(text=response_message), message_object, thread_id, thread_type, ttl=60000)

# -------------------------------
# C√°c h√†m x·ª≠ l√Ω l·ªánh kh√°c (soi, xemphientruoc, dsnohu, dudoan, lichsu)
def handle_soicau_command(message, message_object, thread_id, thread_type, author_id, client):
    current_history = load_current_soicau_data()
    if not current_history:
        client.sendMessage(Message(text="‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu soi c·∫ßu ·ªü phi√™n hi·ªán t·∫°i."),
                           thread_id=thread_id, thread_type=thread_type, ttl=20000)
        return
    soicau_image_path = create_soicau_image(current_history)
    if os.path.exists(soicau_image_path):
        client.sendLocalImage(
            imagePath=soicau_image_path,
            message=Message(text="Phi√™n soi c·∫ßu hi·ªán t·∫°i\nSo·∫°n : xemphientruoc ƒë·ªÉ xem phi√™n tr∆∞·ªõc ƒë√≥"),
            thread_id=thread_id,
            thread_type=thread_type,
            width=1000,
            height=500,
            ttl=60000
        )
    else:
        client.sendMessage(Message(text="‚ùå L·ªói khi t·∫°o ·∫£nh soi c·∫ßu."),
                           thread_id=thread_id, thread_type=thread_type, ttl=20000)

def handle_xemphientruoc_command(message, message_object, thread_id, thread_type, author_id, client):
    old_history = load_old_soicau_data()
    if not old_history:
        client.sendMessage(Message(text="‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu phi√™n tr∆∞·ªõc."),
                           thread_id=thread_id, thread_type=thread_type, ttl=20000)
        return
    soicau_image_path = create_soicau_image(old_history)
    if os.path.exists(soicau_image_path):
        client.sendLocalImage(
            imagePath=soicau_image_path,
            message=Message(text="Phi√™n soi c·∫ßu tr∆∞·ªõc:"),
            thread_id=thread_id,
            thread_type=thread_type,
            width=800,
            height=480,
            ttl=60000
        )
    else:
        client.sendMessage(Message(text="‚ùå L·ªói khi t·∫°o ·∫£nh phi√™n tr∆∞·ªõc."),
                           thread_id=thread_id, thread_type=thread_type, ttl=20000)

def handle_listjackpot_command(message, message_object, thread_id, thread_type, author_id, client):
    jackpot_data = load_jackpot_data()
    participants = jackpot_data.get("participants", [])
    if not participants:
        client.sendMessage(Message(text="Hi·ªán ch∆∞a c√≥ ng∆∞·ªùi ch∆°i n√†o tham gia n·ªï h≈©."),
                           thread_id=thread_id, thread_type=thread_type, ttl=60000)
        return

    response_lines = ["DANH S√ÅCH NG∆Ø·ªúI CH∆†I C√ì KH·∫¢ NƒÇNG N·ªî H≈®:"]
    for idx, pid in enumerate(participants, start=1):
        info_response = client.fetchUserInfo(pid)
        profiles = info_response.unchanged_profiles or info_response.changed_profiles
        name = profiles.get(pid, {}).get("zaloName", "Kh√¥ng x√°c ƒë·ªãnh")
        response_lines.append(f"{idx}. {name}")
    client.sendMessage(Message(text="\n".join(response_lines)),
                       thread_id=thread_id, thread_type=thread_type, ttl=60000)

def weighted_prediction(history):
    weighted_tai = weighted_xiu = total_weight = 0
    for i, item in enumerate(reversed(history), start=1):
        weight = 1 / i
        total_weight += weight
        if item['result'] == 'T√†i':
            weighted_tai += weight
        else:
            weighted_xiu += weight
    return weighted_tai / total_weight, weighted_xiu / total_weight

def handle_dudoan_command(message, message_object, thread_id, thread_type, author_id, client):
    history = load_current_soicau_data()
    if not history or len(history) < 10:
        client.sendMessage(Message(text="‚ùå D·ªØ li·ªáu ch∆∞a ƒë·ªß (√≠t h∆°n 10 v√°n) ƒë·ªÉ ƒë∆∞a ra d·ª± ƒëo√°n kh√°ch quan. H√£y ch∆°i th√™m v√†i v√°n n·ªØa!"),
                           thread_id=thread_id, thread_type=thread_type, ttl=20000)
        return

    total = len(history)
    prob_tai, prob_xiu = weighted_prediction(history)
    confidence = abs(prob_tai - prob_xiu)
    threshold = 0.1
    if confidence < threshold:
        predicted = "C√¢n b·∫±ng"
        reasons = [
            "v√°n ch∆°i g·∫ßn ƒë√¢y cho th·∫•y s·ª± c√¢n b·∫±ng gi·ªØa 'T√†i' v√† 'X·ªâu', kh√¥ng ƒë·ªß b·∫±ng ch·ª©ng ƒë·ªÉ ch·ªçn b√™n n√†o.",
            "s·ªë li·ªáu th·ªëng k√™ cho th·∫•y c·∫£ hai ƒë·ªÅu xu·∫•t hi·ªán t∆∞∆°ng ƒë∆∞∆°ng.",
            "xu h∆∞·ªõng c·ªßa c√°c v√°n ch∆°i kh√° ƒë·ªìng ƒë·ªÅu."
        ]
    else:
        predicted = "T√†i" if prob_tai > prob_xiu else "X·ªâu"
        if predicted == "T√†i":
            reasons = [
                "nh·ªØng v√°n g·∫ßn ƒë√¢y cho th·∫•y 'T√†i' xu·∫•t hi·ªán th∆∞·ªùng xuy√™n h∆°n.",
                "s·ªë li·ªáu cho th·∫•y 'T√†i' c√≥ l·ª£i th·∫ø r√µ r√†ng.",
                "xu h∆∞·ªõng c·ªßa c√°c v√°n ch∆°i g·∫ßn ƒë√¢y nghi√™ng v·ªÅ 'T√†i'."
            ]
        else:
            reasons = [
                "c√°c k·∫øt qu·∫£ m·ªõi nh·∫•t cho th·∫•y 'X·ªâu' chi·∫øm ∆∞u th·∫ø.",
                "s·ªë li·ªáu cho th·∫•y 'X·ªâu' c√≥ l·ª£i th·∫ø h∆°n.",
                "xu h∆∞·ªõng th·ªëng k√™ cho th·∫•y 'X·ªâu' ƒëang d·∫´n ƒë·∫ßu."
            ]
    chosen_reason = random.choice(reasons)
    response = (
        f"D·ª±a v√†o {total} v√°n v·ªõi T√†i {prob_tai*100:.1f}% v√† X·ªâu {prob_xiu*100:.1f}%, "
        f"t√¥i d·ª± ƒëo√°n {predicted} v√¨ {chosen_reason} "
        f"v√† ƒë·ªô t·ª± tin d·ª± ƒëo√°n l√† {confidence*100:.1f}%."
    )
    client.sendMessage(Message(text=response),
                       thread_id=thread_id, thread_type=thread_type, ttl=30000)

def handle_history_command(message, message_object, thread_id, thread_type, author_id, client):
    parts = message.split()
    target_username = ' '.join(parts[1:]).strip()[1:] if len(parts) >= 2 and parts[1].startswith('@') else \
                      (get_user_name(client, author_id) if len(parts) < 2 else ' '.join(parts[1:]).strip())
    
    history_data = load_history_data()
    user_history = history_data.get(target_username, [])
    
    if not user_history:
        response_message = f"‚ùå Ng∆∞·ªùi d√πng '{target_username}' ch∆∞a c√≥ l·ªãch s·ª≠ chi·∫øn t√≠ch n√†o."
        client.replyMessage(Message(text=response_message), message_object, thread_id, thread_type, ttl=60000)
        return

    total_games = len(user_history)
    wins = sum(1 for record in user_history if record.get('net_change', 0) > 0)
    losses = sum(1 for record in user_history if record.get('net_change', 0) < 0)
    win_rate = (wins / total_games) * 100 if total_games > 0 else 0
    money_won = sum(record.get('net_change', 0) for record in user_history if record.get('net_change', 0) > 0)
    money_lost = sum(-record.get('net_change', 0) for record in user_history if record.get('net_change', 0) < 0)
    
    response_message = (
        f"üìú L·ªäCH S·ª¨ CHI·∫æN T√çCH:\n"
        f"üë§ {target_username}\n"
        f"üé≤ Game: T√†i X·ªâu\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üìä T·ªïng s·ªë tr·∫≠n: {total_games}\n"
        f"‚úÖ Tr·∫≠n th·∫Øng: {wins}\n"
        f"‚ùå Tr·∫≠n thua: {losses}\n"
        f"üìà T·ªâ l·ªá th·∫Øng: {win_rate:.2f}%\n"
        f"üí∞ Ti·ªÅn th·∫Øng: {format_money(money_won)}\n"
        f"üí∏ Ti·ªÅn thua: {format_money(money_lost)}\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    )
    client.sendMessage(Message(text=response_message),
                       thread_id=thread_id, thread_type=thread_type, ttl=60000)

# -------------------------------
# Mapping l·ªánh ƒë·∫øn c√°c h√†m x·ª≠ l√Ω
def get_mitaizl():
    return {
        'txiu': handle_taixiu_command,
        'taixiu': handle_taixiu_command,
        'soi': handle_soicau_command,
        'xemphientruoc': handle_xemphientruoc_command,
        'dsnohu': handle_listjackpot_command,
        'dudoan': handle_dudoan_command,
        'lichsu': handle_history_command,
        'on': handle_taixiu_on_command
    }
