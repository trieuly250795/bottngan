import requests
import os
from datetime import datetime
from zlapi.models import Message, ZaloAPIException
from PIL import Image, ImageDraw, ImageFont, ImageOps
from io import BytesIO

# Th√¥ng tin m√¥ t·∫£
des = {
    't√°c gi·∫£': "Rosy",
    'm√¥ t·∫£': "L·ªánh troll 'b√†n th·ªù' khi tag ai ƒë√≥",
    't√≠nh nƒÉng': [
        "üîç Ch·ªâ admin m·ªõi c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh",
        "üé® T·∫°o ·∫£nh b√†n th·ªù c√≥ avatar v√† t√™n ng∆∞·ªùi b·ªã tag",
        "üñºÔ∏è H·ªó tr·ª£ bo g√≥c avatar ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp h∆°n",
        "üì© G·ª≠i tin nh·∫Øn nh·∫Øc n·∫øu kh√¥ng tag ai",
        "üóëÔ∏è T·ª± ƒë·ªông x√≥a ·∫£nh sau khi g·ª≠i"
    ],
    'h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng': [
        "üì© Nh·∫≠p l·ªánh 'bantho' k√®m tag ng∆∞·ªùi c·∫ßn troll.",
        "üìå V√≠ d·ª•: bantho @username ƒë·ªÉ troll ng∆∞·ªùi d√πng ƒë∆∞·ª£c tag.",
        "‚úÖ Nh·∫≠n th√¥ng b√°o tr·∫°ng th√°i v√† k·∫øt qu·∫£ ngay l·∫≠p t·ª©c."
    ]
}

# Danh s√°ch ID admin ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng l·ªánh
ADMIN_IDS = ["2670654904430771575"]  # Thay ƒë·ªïi theo ID admin c·ªßa b·∫°n

# H√†m t·∫°o ·∫£nh
def create_canvas(user_data):
    # M·ªü ·∫£nh n·ªÅn
    background_image = Image.open("bantho.png")
    draw = ImageDraw.Draw(background_image)

    # K√≠ch th∆∞·ªõc ·∫£nh n·ªÅn
    bg_width, bg_height = background_image.size

    # L·∫•y avatar t·ª´ URL ho·∫∑c s·ª≠ d·ª•ng ·∫£nh m·∫∑c ƒë·ªãnh
    avatar_url = user_data.get('avatar')
    if avatar_url:
        response = requests.get(avatar_url)
        avatar_image = Image.open(BytesIO(response.content)).convert("RGB")
    else:
        avatar_image = Image.open("default_avatar.jpg").convert("RGB")

    # ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc avatar
    avatar_size = (110, 145)
    avatar_image = ImageOps.fit(avatar_image, avatar_size, centering=(0.5, 0.5))

    # Bo g√≥c avatar
    mask = Image.new("L", avatar_size, 255)
    draw_mask = ImageDraw.Draw(mask)
    draw_mask.ellipse((0, 0) + avatar_size, fill=255)
    avatar_image.putalpha(mask)

    # V·ªã tr√≠ ƒë·∫∑t avatar
    avatar_x = bg_width - avatar_size[0] - 240
    avatar_y = (bg_height - avatar_size[1]) // 6 - 5
    background_image.paste(avatar_image, (avatar_x, avatar_y), avatar_image)

    # Th√™m th√¥ng tin (ch·ªânh font v√† v·ªã tr√≠ ch·ªØ theo k√≠ch th∆∞·ªõc ·∫£nh n·ªÅn)
    fontc = "UTM AvoBold.ttf"
    font_size = int(bg_height * 0.05)
    font_title = ImageFont.truetype(fontc, font_size)
    font_info = ImageFont.truetype(fontc, font_size + 10)

    # N·ªôi dung text
    text_title = "Chia bu·ªìn c√πng gia ƒë√¨nh:"
    text_info = user_data.get('displayName', 'N/A')

    # V·ªã tr√≠ d·ªçc kh√¥ng thay ƒë·ªïi
    title_y = int(bg_height * 0.8)
    info_y = title_y + font_size + 10

    # T√≠nh to√°n ƒë·ªô r·ªông c·ªßa t·ª´ng d√≤ng ch·ªØ s·ª≠ d·ª•ng textbbox
    title_bbox = draw.textbbox((0, 0), text_title, font=font_title)
    title_width = title_bbox[2] - title_bbox[0]

    info_bbox = draw.textbbox((0, 0), text_info, font=font_info)
    info_width = info_bbox[2] - info_bbox[0]

    # T√≠nh v·ªã tr√≠ x ƒë·ªÉ cƒÉn gi·ªØa
    title_x = (bg_width - title_width) // 2
    info_x = (bg_width - info_width) // 2

    # V·∫Ω text l√™n ·∫£nh n·ªÅn
    draw.text((title_x, title_y), text_title, font=font_title, fill=(255, 0, 0))
    draw.text((info_x, info_y), text_info, font=font_info, fill=(255, 0, 0))

    # L∆∞u ·∫£nh
    canvas_path = "output_canvas.png"
    background_image.save(canvas_path)
    return canvas_path

# H√†m x·ª≠ l√Ω ng∆∞·ªùi d√πng ƒë∆∞·ª£c g·∫Øn th·∫ª
def handle_user_info(message, message_object, thread_id, thread_type, author_id, client):
    """
    X·ª≠ l√Ω th√¥ng tin ng∆∞·ªùi d√πng ƒë∆∞·ª£c g·∫Øn th·∫ª v√† t·∫°o ·∫£nh.
    Ch·ªâ cho ph√©p admin s·ª≠ d·ª•ng l·ªánh n√†y.
    """
    # Ki·ªÉm tra quy·ªÅn admin
    if author_id not in ADMIN_IDS:
        error_message = Message(text="B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!")
        client.replyMessage(error_message, message_object, thread_id, thread_type, ttl=10000)
        return

    try:
        # G·ª≠i ph·∫£n ·ª©ng ngay khi nh·∫≠n l·ªánh h·ª£p l·ªá
        action = "‚úÖ"
        client.sendReaction(message_object, action, thread_id, thread_type, reactionType=75)
        
        # N·∫øu ng∆∞·ªùi d√πng ch·ªâ nh·∫≠p "b√†n th·ªù" (kh√¥ng tag ai) th√¨ ch·ªâ g·ª≠i tin nh·∫Øn nh·∫Øc nh·ªü
        if not message_object.mentions:
            reminder_message = "Ch·ªã Rosy h√£y tag con ch√≥ ƒë·ªÉ em c√∫ng n√≥"
            client.sendMessage(Message(text=reminder_message), thread_id, thread_type, ttl=30000)
            return

        # N·∫øu c√≥ tag th√¨ ti·∫øn h√†nh t·∫°o ·∫£nh cho t·ª´ng ng∆∞·ªùi ƒë∆∞·ª£c tag
        for mention in message_object.mentions:
            user_id = mention['uid']
            # B·ªè qua n·∫øu user l√† admin
            if user_id in ADMIN_IDS:
                continue

            user_info = client.fetchUserInfo(user_id)
            user_data = user_info.get('changed_profiles', {}).get(user_id, {})

            # T·∫°o ·∫£nh
            canvas_path = create_canvas(user_data)

            if os.path.exists(canvas_path):
                # G·ª≠i ·∫£nh
                client.sendLocalImage(
                    canvas_path,
                    message=None,
                    thread_id=thread_id,
                    thread_type=thread_type,
                    width=558,
                    height=663,
                    ttl=120000
                )
                os.remove(canvas_path)

    except (ValueError, ZaloAPIException) as e:
        error_message = Message(text=f"Error: {str(e)}")
        client.replyMessage(error_message, message_object, thread_id, thread_type, ttl=10000)
    except Exception as e:
        error_message = Message(text=f"An unexpected error occurred: {str(e)}")
        client.replyMessage(error_message, message_object, thread_id, thread_type, ttl=10000)

# H√†m tr·∫£ v·ªÅ danh s√°ch c√°c l·ªánh
def get_mitaizl():
    return {
        'bantho': handle_user_info
    }
