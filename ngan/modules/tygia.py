import os
import pytz
from datetime import datetime
from PIL import Image, ImageDraw, ImageFont
from zlapi.models import Message, Mention
from forex_python.converter import CurrencyRates

des = {
    't√°c gi·∫£': "Rosy",
    'm√¥ t·∫£': "Hi·ªÉn th·ªã t·ª∑ gi√° ngo·∫°i t·ªá",
    't√≠nh nƒÉng': [
        "üíπ L·∫•y t·ª∑ gi√° h·ªëi ƒëo√°i so v·ªõi VND cho c√°c ƒë·ªìng ti·ªÅn ph·ªï bi·∫øn.",
        "üé® V·∫Ω vƒÉn b·∫£n v·ªõi hi·ªáu ·ª©ng gradient v√† b√≥ng ƒë·ªï.",
        "üñºÔ∏è T·∫°o ·∫£nh hi·ªÉn th·ªã t·ª∑ gi√° v·ªõi vi·ªÅn ƒëa s·∫Øc v√† g√≥c bo tr√≤n.",
        "üïí Hi·ªÉn th·ªã th·ªùi gian c·∫≠p nh·∫≠t t·ª∑ gi√°.",
        "üîç Th√¥ng b√°o l·ªói c·ª• th·ªÉ n·∫øu c√≥ v·∫•n ƒë·ªÅ x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu."
    ],
    'h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng': [
        "üì© G·ª≠i l·ªánh tygia ƒë·ªÉ hi·ªÉn th·ªã t·ª∑ gi√° ngo·∫°i t·ªá hi·ªán t·∫°i.",
        "üìå V√≠ d·ª•: tygia ƒë·ªÉ l·∫•y v√† hi·ªÉn th·ªã t·ª∑ gi√° c·ªßa c√°c ƒë·ªìng ti·ªÅn ph·ªï bi·∫øn so v·ªõi VND.",
        "‚úÖ Nh·∫≠n th√¥ng b√°o tr·∫°ng th√°i v√† k·∫øt qu·∫£ ngay l·∫≠p t·ª©c."
    ]
}

# ---------------------------
# C√°c h√†m h·ªó tr·ª£ cho hi·ªáu ·ª©ng gradient
# ---------------------------
def get_gradient_color(colors, ratio):
    """N·ªôi suy m√†u d·ª±a tr√™n danh s√°ch m√†u 'colors' v√† gi√° tr·ªã 'ratio' trong kho·∫£ng [0, 1]."""
    if ratio <= 0:
        return colors[0]
    if ratio >= 1:
        return colors[-1]
    total_segments = len(colors) - 1
    segment = int(ratio * total_segments)
    segment_ratio = (ratio * total_segments) - segment
    c1 = colors[segment]
    c2 = colors[segment + 1]
    r = int(c1[0] * (1 - segment_ratio) + c2[0] * segment_ratio)
    g = int(c1[1] * (1 - segment_ratio) + c2[1] * segment_ratio)
    b = int(c1[2] * (1 - segment_ratio) + c2[2] * segment_ratio)
    return (r, g, b)

def draw_gradient_text(draw, text, position, font, gradient_colors, shadow_offset=(2, 2)):
    """V·∫Ω vƒÉn b·∫£n v·ªõi hi·ªáu ·ª©ng gradient v√† b√≥ng ƒë·ªï."""
    gradient = []
    text_length = len(text)
    for i in range(text_length):
        ratio = i / max(text_length - 1, 1)
        gradient.append(get_gradient_color(gradient_colors, ratio))
    x, y = position
    shadow_color = (0, 0, 0)
    for i, char in enumerate(text):
        # V·∫Ω b√≥ng ƒë·ªï cho t·ª´ng k√Ω t·ª±
        draw.text((x + shadow_offset[0], y + shadow_offset[1]), char, font=font, fill=shadow_color)
        # V·∫Ω k√Ω t·ª± v·ªõi m√†u s·∫Øc gradient
        draw.text((x, y), char, font=font, fill=gradient[i])
        char_width = draw.textbbox((0, 0), char, font=font)[2]
        x += char_width

def add_multicolor_rectangle_border(image, colors, border_thickness):
    """Th√™m vi·ªÅn ƒëa s·∫Øc cho ·∫£nh v·ªõi ƒë·ªô d√†y 'border_thickness'."""
    new_w = image.width + 2 * border_thickness
    new_h = image.height + 2 * border_thickness
    border_img = Image.new("RGBA", (new_w, new_h), (0, 0, 0, 0))
    draw = ImageDraw.Draw(border_img)
    # V·∫Ω c·∫°nh tr√™n v√† d∆∞·ªõi
    for x in range(new_w):
        color = get_gradient_color(colors, x / new_w)
        draw.line([(x, 0), (x, border_thickness - 1)], fill=color)
        draw.line([(x, new_h - border_thickness), (x, new_h - 1)], fill=color)
    # V·∫Ω c·∫°nh tr√°i v√† ph·∫£i
    for y in range(new_h):
        color = get_gradient_color(colors, y / new_h)
        draw.line([(0, y), (border_thickness - 1, y)], fill=color)
        draw.line([(new_w - border_thickness, y), (new_w - 1, y)], fill=color)
    # D√°n ·∫£nh g·ªëc l√™n ·∫£nh vi·ªÅn
    image_rgba = image.convert("RGBA")
    border_img.paste(image_rgba, (border_thickness, border_thickness), image_rgba)
    return border_img

def round_corners(image, radius):
    """Bo tr√≤n 4 g√≥c c·ªßa ·∫£nh v·ªõi b√°n k√≠nh 'radius'."""
    mask = Image.new('L', image.size, 0)
    draw = ImageDraw.Draw(mask)
    draw.rounded_rectangle([(0, 0), image.size], radius=radius, fill=255)
    image.putalpha(mask)
    return image

# ---------------------------
# T·ª∑ gi√° ngo·∫°i t·ªá
# ---------------------------
# Danh s√°ch 10 ƒë·ªìng ti·ªÅn ph·ªï bi·∫øn
CURRENCIES = ["USD", "EUR", "GBP", "JPY", "CNY", "AUD", "CAD", "SGD", "KRW", "THB"]

def get_exchange_rates():
    """L·∫•y t·ª∑ gi√° h·ªëi ƒëo√°i so v·ªõi VND b·∫±ng forex-python."""
    c = CurrencyRates()
    rates = {}
    for currency in CURRENCIES:
        try:
            rates[currency] = c.convert(currency, "VND", 1)
        except Exception:
            rates[currency] = "N/A"
    return rates

def create_exchange_rate_image():
    """T·∫°o ·∫£nh hi·ªÉn th·ªã t·ª∑ gi√° h·ªëi ƒëo√°i v·ªõi hi·ªáu ·ª©ng gradient, vi·ªÅn ƒëa s·∫Øc v√† g√≥c bo tr√≤n."""
    rates = get_exchange_rates()
    # L·∫•y th·ªùi gian hi·ªán t·∫°i theo m√∫i gi·ªù Vi·ªát Nam
    hcm_tz = pytz.timezone('Asia/Ho_Chi_Minh')
    current_time = datetime.now(hcm_tz).strftime("%H:%M %d/%m/%Y")
    
    # K√≠ch th∆∞·ªõc ·∫£nh
    width, height = 600, 600
    output_path = "modules/cache/temp_exchange_rates.jpg"
    
    # T·∫°o ·∫£nh n·ªÅn ƒë∆°n s·∫Øc
    background = Image.new("RGB", (width, height), (230, 230, 250))
    draw = ImageDraw.Draw(background)
    
    # ƒê∆∞·ªùng d·∫´n font ch·ªØ
    font_path = os.path.abspath("modules/Font/NotoSans-Bold.ttf")
    title_font = ImageFont.truetype(font_path, 40)
    text_font = ImageFont.truetype(font_path, 30)
    
    # ƒê·ªãnh nghƒ©a danh s√°ch m√†u gradient
    gradient_colors = [
        (255, 0, 0), (255, 165, 0), (255, 255, 0),
        (0, 255, 0), (0, 0, 255), (75, 0, 130), (148, 0, 211)
    ]
    
    # V·∫Ω ti√™u ƒë·ªÅ (cƒÉn gi·ªØa theo chi·ªÅu ngang)
    title_text = "T·ª∑ gi√° ngo·∫°i t·ªá (VND)"
    title_bbox = draw.textbbox((0, 0), title_text, font=title_font)
    title_width = title_bbox[2] - title_bbox[0]
    title_x = (width - title_width) // 2
    draw_gradient_text(draw, title_text, (title_x, 20), title_font, gradient_colors)
    
    # Hi·ªÉn th·ªã danh s√°ch t·ª∑ gi√°
    y_offset = 100
    for currency, rate in rates.items():
        rate_str = f"{rate:,.2f}" if rate != "N/A" else rate
        line_text = f"{currency}: {rate_str} VND"
        draw_gradient_text(draw, line_text, (40, y_offset), text_font, gradient_colors)
        y_offset += 40
    
    # Hi·ªÉn th·ªã th·ªùi gian c·∫≠p nh·∫≠t, cƒÉn gi·ªØa
    time_text = f"C·∫≠p nh·∫≠t: {current_time}"
    time_bbox = draw.textbbox((0, 0), time_text, font=text_font)
    time_width = time_bbox[2] - time_bbox[0]
    time_x = (width - time_width) // 2
    draw_gradient_text(draw, time_text, (time_x, y_offset + 20), text_font, gradient_colors)
    
    # Th√™m vi·ªÅn ƒëa s·∫Øc quanh khung ·∫£nh
    border_thickness = 10
    bordered_img = add_multicolor_rectangle_border(background, gradient_colors, border_thickness)
    
    # Bo tr√≤n 4 g√≥c c·ªßa ·∫£nh (bao g·ªìm c·∫£ vi·ªÅn)
    final_img = round_corners(bordered_img, radius=20)
    
    # Chuy·ªÉn v·ªÅ RGB n·∫øu c·∫ßn l∆∞u d∆∞·ªõi ƒë·ªãnh d·∫°ng JPEG (kh√¥ng h·ªó tr·ª£ alpha)
    final_img = final_img.convert("RGB")
    final_img.save(output_path)
    return output_path

def handle_exchange_rate_command(message, message_object, thread_id, thread_type, author_id, client):
    # G·ª≠i ph·∫£n ·ª©ng ngay khi ng∆∞·ªùi d√πng so·∫°n ƒë√∫ng l·ªánh
    action = "‚úÖ"
    client.sendReaction(message_object, action, thread_id, thread_type, reactionType=75)
    
    # G·ª≠i th√¥ng b√°o ban ƒë·∫ßu
    reply_message = "ƒêang ti·∫øn h√†nh l·∫•y t·ª∑ gi√° h·ªëi ƒëo√°i h√¥m nay ..."
    client.sendMessage(Message(text=reply_message), thread_id, thread_type, ttl=30000)
    
    try:
        image_path = create_exchange_rate_image()
        if os.path.exists(image_path):
            # G·ª≠i ·∫£nh t·ª∑ gi√° k√®m tin nh·∫Øn, s·ª≠ d·ª•ng mention ƒë·ªÉ tag ng∆∞·ªùi d√πng n·∫øu c·∫ßn
            client.sendLocalImage(
                image_path,
                message=Message(text="@Member", mention=Mention(author_id, length=len("@Member"), offset=0)),
                thread_id=thread_id,
                thread_type=thread_type,
                width=600,
                height=600,
                ttl=30000
            )
            os.remove(image_path)
        else:
            raise Exception("Kh√¥ng th·ªÉ l∆∞u ·∫£nh.")
    except Exception as e:
        client.sendMessage(Message(text=f"ƒê√£ x·∫£y ra l·ªói: {str(e)}"), thread_id, thread_type)

def get_mitaizl():
    """Tr·∫£ v·ªÅ danh s√°ch c√°c l·ªánh h·ªó tr·ª£ trong bot."""
    return {
        'tygia': handle_exchange_rate_command
    }
