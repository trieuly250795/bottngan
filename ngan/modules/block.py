from zlapi.models import Message
from config import ADMIN

des = {
    't√°c gi·∫£': "Rosy",
    'm√¥ t·∫£': "Module h·ªó tr·ª£ admin ch·∫∑n ho·∫∑c m·ªü ch·∫∑n ng∆∞·ªùi d√πng trong bot.",
    't√≠nh nƒÉng': [
        "üö´ Ch·∫∑n ng∆∞·ªùi d√πng b·∫±ng UID",
        "‚úÖ M·ªü ch·∫∑n ng∆∞·ªùi d√πng b·∫±ng UID",
        "üîí Ch·ªâ admin m·ªõi c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh",
        "‚ö†Ô∏è Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa UID tr∆∞·ªõc khi th·ª±c hi·ªán",
        "üìå Ph·∫£n h·ªìi ngay l·∫≠p t·ª©c khi thao t√°c th√†nh c√¥ng ho·∫∑c th·∫•t b·∫°i",
        "üîß X·ª≠ l√Ω l·ªói khi ch·∫∑n/m·ªü ch·∫∑n kh√¥ng th√†nh c√¥ng"
    ],
    'h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng': "D√πng l·ªánh 'block' ho·∫∑c 'unblock' k√®m theo UID c·ªßa ng∆∞·ªùi d√πng. V√≠ d·ª•: 'block 123456789' ho·∫∑c 'unblock 123456789'."
}

# Handle blocking a user by UID
def handle_block_user_by_uid(message, message_object, thread_id, thread_type, author_id, client):
    # G·ª≠i ph·∫£n ·ª©ng ngay khi ng∆∞·ªùi d√πng so·∫°n ƒë√∫ng l·ªánh
    action = "‚úÖ"
    client.sendReaction(message_object, action, thread_id, thread_type, reactionType=75)
    
    # Verify admin privileges
    if author_id not in ADMIN:
        client.replyMessage(Message(text="B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y."), message_object, thread_id, thread_type)
        return
    
    # Parse command input
    parts = message.split(' ', 2)
    if len(parts) < 2:
        client.replyMessage(Message(text="Vui l√≤ng cung c·∫•p UID ng∆∞·ªùi d√πng ƒë·ªÉ ch·∫∑n.\nV√≠ d·ª•: block UID"), message_object, thread_id, thread_type)
        return
    
    user_id = parts[1]
    if not user_id.isdigit():
        client.replyMessage(Message(text="UID kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p UID h·ª£p l·ªá."), message_object, thread_id, thread_type)
        return
    
    try:
        # Block the user
        client.blockUser(user_id)
        client.replyMessage(Message(text=f"ƒê√£ ch·∫∑n ng∆∞·ªùi d√πng v·ªõi UID {user_id}."), message_object, thread_id, thread_type)
    except Exception as e:
        client.replyMessage(Message(text=f"Kh√¥ng th·ªÉ ch·∫∑n ng∆∞·ªùi d√πng v·ªõi UID {user_id}. L·ªói: {str(e)}"), message_object, thread_id, thread_type)

# Handle unblocking a user by UID
def handle_unblock_user_by_uid(message, message_object, thread_id, thread_type, author_id, client):
    # G·ª≠i ph·∫£n ·ª©ng ngay khi ng∆∞·ªùi d√πng so·∫°n ƒë√∫ng l·ªánh
    action = "‚úÖ"
    client.sendReaction(message_object, action, thread_id, thread_type, reactionType=75)
    
    # Verify admin privileges
    if author_id not in ADMIN:
        client.replyMessage(Message(text="B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y."), message_object, thread_id, thread_type)
        return
    
    # Parse command input
    parts = message.split(' ', 2)
    if len(parts) < 2:
        client.replyMessage(Message(text="Vui l√≤ng cung c·∫•p UID ng∆∞·ªùi d√πng ƒë·ªÉ m·ªü ch·∫∑n.\nV√≠ d·ª•: unblock UID"), message_object, thread_id, thread_type)
        return
    
    user_id = parts[1]
    if not user_id.isdigit():
        client.replyMessage(Message(text="UID kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p UID h·ª£p l·ªá."), message_object, thread_id, thread_type)
        return
    
    try:
        # Unblock the user
        client.unblockUser(user_id)
        client.replyMessage(Message(text=f"ƒê√£ m·ªü ch·∫∑n ng∆∞·ªùi d√πng v·ªõi UID {user_id}."), message_object, thread_id, thread_type)
    except Exception as e:
        client.replyMessage(Message(text=f"Kh√¥ng th·ªÉ m·ªü ch·∫∑n ng∆∞·ªùi d√πng v·ªõi UID {user_id}. L·ªói: {str(e)}"), message_object, thread_id, thread_type)

# Register commands with the bot
def get_mitaizl():
    return {
        'block': handle_block_user_by_uid,
        'unblock': handle_unblock_user_by_uid
    }
