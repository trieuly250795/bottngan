from zlapi.models import Message, MultiMsgStyle, MessageStyle
from config import ADMIN  # L·∫•y ADMIN t·ª´ config.py

des = {
    't√°c gi·∫£': "Rosy",
    'm√¥ t·∫£': "C√†i ƒë·∫∑t ƒë√≥ng/m·ªü chat cho nh√≥m",
    't√≠nh nƒÉng': [
        "üîÑ ƒê√≥ng ho·∫∑c m·ªü chat c·ªßa nh√≥m.",
        "üîç Ki·ªÉm tra quy·ªÅn admin tr∆∞·ªõc khi th·ª±c hi·ªán l·ªánh.",
        "üîî Th√¥ng b√°o tr·∫°ng th√°i hi·ªán t·∫°i v√† k·∫øt qu·∫£ sau khi thay ƒë·ªïi c√†i ƒë·∫∑t nh√≥m.",
        "üîí L∆∞u tr·ªØ tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa nh√≥m ƒë·ªÉ c√≥ th·ªÉ ƒë·∫£o ng∆∞·ª£c l·∫°i."
    ],
    'h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng': [
        "üì© G·ª≠i l·ªánh sos ƒë·ªÉ ƒë√≥ng/m·ªü chat cho nh√≥m.",
        "üìå V√≠ d·ª•: sos ƒë·ªÉ ƒë·∫£o ng∆∞·ª£c tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa nh√≥m.",
        "‚úÖ Nh·∫≠n th√¥ng b√°o tr·∫°ng th√°i v√† k·∫øt qu·∫£ thay ƒë·ªïi ngay l·∫≠p t·ª©c."
    ]
}

# Bi·∫øn tr·∫°ng th√°i ƒë·ªÉ l∆∞u tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa nh√≥m (m·ªü ho·∫∑c ƒë√≥ng chat)
group_chat_status = {}  # L∆∞u tr·∫°ng th√°i theo thread_id

def is_admin(author_id):
    """Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† admin kh√¥ng"""
    return author_id == ADMIN

def handle_bot_sos_command(message, message_object, thread_id, thread_type, author_id, client):
    try:
        # Ki·ªÉm tra quy·ªÅn admin
        if not is_admin(author_id):
            error_msg = "‚Ä¢ B·∫°n Kh√¥ng C√≥ Quy·ªÅn! Ch·ªâ c√≥ admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y."
            style_error = MultiMsgStyle(
                [
                    MessageStyle(
                        offset=0,
                        length=len(error_msg),
                        style="color",
                        color="#db342e",
                        auto_format=False,
                    ),
                    MessageStyle(
                        offset=0,
                        length=len(error_msg),
                        style="bold",
                        size="16",
                        auto_format=False,
                    ),
                ]
            )
            client.replyMessage(Message(text=error_msg, style=style_error), message_object, thread_id, thread_type)
            return

        # L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa nh√≥m
        current_status = group_chat_status.get(thread_id, 0)  # M·∫∑c ƒë·ªãnh l√† m·ªü chat (0)

        # ƒê·∫£o tr·∫°ng th√°i: 0 -> 1 (ƒë√≥ng), 1 -> 0 (m·ªü)
        new_status = 1 if current_status == 0 else 0
        group_chat_status[thread_id] = new_status

        # C·∫≠p nh·∫≠t c√†i ƒë·∫∑t nh√≥m
        kwargs = {"lockSendMsg": new_status}
        client.changeGroupSetting(thread_id, **kwargs)

        # Ph·∫£n h·ªìi tr·∫°ng th√°i m·ªõi
        action = "ƒê√≥ng chat th√†nh c√¥ng!" if new_status == 1 else "M·ªü chat th√†nh c√¥ng!"
        style_action = MultiMsgStyle(
            [
                MessageStyle(
                    offset=0,
                    length=len(action),
                    style="color",
                    color="#db342e",
                    auto_format=False,
                ),
                MessageStyle(
                    offset=0,
                    length=len(action),
                    style="bold",
                    size="16",
                    auto_format=False,
                ),
            ]
        )
        client.replyMessage(Message(text=action, style=style_action), message_object, thread_id, thread_type)

    except Exception as e:
        # X·ª≠ l√Ω l·ªói n·∫øu c√≥
        error_message = f"L·ªói khi thay ƒë·ªïi c√†i ƒë·∫∑t nh√≥m: {str(e)}"
        style_error = MultiMsgStyle(
            [
                MessageStyle(
                    offset=0,
                    length=len(error_message),
                    style="color",
                    color="#db342e",
                    auto_format=False,
                ),
                MessageStyle(
                    offset=0,
                    length=len(error_message),
                    style="bold",
                    size="16",
                    auto_format=False,
                ),
            ]
        )
        client.replyMessage(Message(text=error_message, style=style_error), message_object, thread_id, thread_type)

def get_mitaizl():
    return {
        'sos': handle_bot_sos_command
    }
